#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#include <iostream>
#include <string_view>
#include <tuple>
#include <set>
#include <map>
#include <algorithm>
#include <sstream>
#include <list>

#include <regex>

#define myprint(arg) std::cout << "" #arg << " = " << arg << std::endl;

struct PointT {
    int64_t x = 0;
    int64_t y = 0;
    int64_t z = 0;
};

bool operator==(const PointT &a, const PointT &b) {
    return std::tie(a.x, a.y, a.z) == std::tie(b.x, b.y, b.z);
}

bool operator<(const PointT &a, const PointT &b) {
    return std::tie(a.x, a.y, a.z) < std::tie(b.x, b.y, b.z);
}

std::ostream &operator<<(std::ostream &stream, const PointT &p) {
    stream << "[" << p.x << "," << p.y << "," << p.z << "]";
    return stream;
}


static std::vector<std::vector<PointT>> input_real = {
        {{-339, -423, -683},
                {388,  759,  -628},
                {-365, -593, 333},
                {-681, 789,  510},
                {-595, 692,  449},
                {524,  660,  -632},
                {-640, 852,  -712},
                {345,  -679, 700},
                {544,  -647, -440},
                {-293, -502, -733},
                {-658, 852,  -647},
                {27,   60,   34},
                {550,  449,  659},
                {425,  -794, 745},
                {669,  -569, -410},
                {395,  662,  -590},
                {-328, -606, 269},
                {681,  423,  642},
                {-315, -725, 288},
                {-571, 892,  -801},
                {364,  -748, 824},
                {-440, -496, -718},
                {133,  -79,  -86},
                {760,  456,  621},
                {-673, 669,  512},
                {598,  -692, -433},
        },
        {
         {476,  -305, 615},
                {-568, 591,  -608},
                {-540, -494, 359},
                {532,  -377, 628},
                {-516, -436, 436},
                {-11,  13,   -5},
                {408,  -806, -440},
                {433,  858,  750},
                {593,  515,  -406},
                {424,  911,  865},
                {424,  -735, -351},
                {-690, 721,  917},
                {456,  893,  715},
                {276,  -708, -421},
                {607,  -418, 641},
                {-540, 718,  873},
                {-613, 637,  827},
                {583,  493,  -402},
                {-798, 632,  -588},
                {-901, -676, -531},
                {-571, -372, 452},
                {-936, -546, -614},
                {-857, -586, -483},
                {560,  453,  -383},
                {-175, -66,  119},
                {-667, 746,  -630},
        },
        {

         {-780, 672,  -873},
                {-414, -396, 573},
                {451,  -547, 450},
                {-494, -348, 583},
                {169,  134,  -141},
                {970,  704,  -834},
                {761,  712,  -798},
                {-719, 561,  -893},
                {-380, -721, -584},
                {-312, 809,  717},
                {-352, 700,  642},
                {427,  -363, -748},
                {408,  -403, -703},
                {-439, 768,  771},
                {735,  892,  471},
                {-329, -363, 473},
                {-12,  -3,   10},
                {-805, 512,  -765},
                {820,  750,  -883},
                {399,  -448, 532},
                {404,  -258, -837},
                {624,  844,  484},
                {-379, -739, -772},
                {798,  769,  506},
                {-362, -833, -659},
                {479,  -582, 534},
        },
        {

         {-635, 654,  370},
                {780,  -657, -564},
                {409,  -386, 453},
                {-675, 690,  556},
                {-806, 743,  -612},
                {-897, -324, 770},
                {-626, -572, -488},
                {709,  760,  -431},
                {629,  832,  566},
                {35,   95,   16},
                {626,  821,  642},
                {427,  -306, 598},
                {773,  -585, -492},
                {-114, 30,   -94},
                {650,  -644, -531},
                {-773, -295, 762},
                {641,  788,  -624},
                {-754, -492, -532},
                {422,  -388, 728},
                {594,  801,  550},
                {634,  772,  -563},
                {-665, 571,  422},
                {-765, 754,  -657},
                {-539, -475, -594},
                {-649, 805,  -584},
                {-738, -358, 740},
        },
        {

         {704,  -633, 783},
                {322,  788,  -848},
                {-696, -585, -803},
                {-539, 552,  589},
                {-494, 641,  -759},
                {411,  526,  567},
                {401,  731,  -824},
                {-465, 621,  -815},
                {-514, 782,  555},
                {632,  -705, 776},
                {-741, -573, 644},
                {-476, 784,  592},
                {-713, -766, 712},
                {-707, -540, -762},
                {569,  762,  -851},
                {407,  472,  511},
                {-758, -613, -646},
                {-97,  110,  -136},
                {619,  -709, -623},
                {-495, 603,  -637},
                {82,   -22,  -41},
                {539,  -665, -751},
                {522,  -603, -536},
                {691,  -666, 653},
                {557,  529,  509},
                {-725, -634, 637},
        },
        {

         {125,  -50,  43},
                {38,   47,   -110},
                {482,  710,  747},
                {775,  -478, 347},
                {-381, 583,  485},
                {469,  451,  730},
                {-594, 406,  -444},
                {-587, -330, 624},
                {-470, -772, -864},
                {813,  -677, -436},
                {916,  -658, -511},
                {499,  584,  739},
                {-505, 454,  -517},
                {-419, -579, -874},
                {-480, 370,  -496},
                {626,  767,  -739},
                {584,  706,  -736},
                {-536, -378, 561},
                {792,  -591, 253},
                {-402, -686, -807},
                {-350, 596,  481},
                {774,  -666, 365},
                {695,  707,  -590},
                {-632, -382, 452},
                {-380, 545,  482},
                {825,  -574, -415},
        },
        {

         {-623, 627,  873},
                {648,  -548, 593},
                {386,  669,  498},
                {-577, 672,  -562},
                {-732, 573,  -584},
                {723,  -633, -378},
                {-862, -579, -629},
                {-764, -563, -563},
                {-704, 700,  919},
                {600,  383,  -437},
                {450,  724,  482},
                {740,  -464, -328},
                {-905, -595, 476},
                {690,  339,  -485},
                {51,   2,    87},
                {-29,  -131, 183},
                {-906, -566, -516},
                {-618, 442,  -542},
                {590,  -624, 646},
                {-803, -658, 437},
                {560,  304,  -568},
                {508,  700,  405},
                {615,  -759, 622},
                {610,  -520, -339},
                {-707, 550,  963},
                {-793, -606, 426},
        },
        {

         {-99,  117,  -7},
                {-483, 586,  -949},
                {-630, -361, -457},
                {389,  847,  286},
                {472,  -308, 755},
                {-714, -389, -409},
                {419,  885,  -977},
                {-704, -368, -583},
                {-569, 709,  377},
                {503,  -451, 769},
                {-615, -488, 647},
                {-385, 492,  -943},
                {-629, -313, 549},
                {473,  -258, 790},
                {-712, 607,  420},
                {485,  866,  285},
                {493,  825,  -915},
                {445,  -615, -869},
                {578,  945,  -920},
                {308,  -606, -818},
                {309,  -572, -764},
                {-549, 547,  -968},
                {354,  800,  217},
                {-78,  -38,  -135},
                {-631, -391, 597},
                {-492, 555,  393},
        },
        {

         {-833, -573, -767},
                {-572, 435,  589},
                {-965, -621, -769},
                {-143, -91,  -98},
                {331,  593,  -726},
                {-574, 526,  -661},
                {584,  290,  438},
                {-480, 352,  492},
                {-497, 572,  504},
                {455,  -903, 336},
                {315,  -822, -726},
                {486,  -760, 322},
                {-569, 352,  -713},
                {-984, -616, -722},
                {-86,  31,   66},
                {330,  -692, -645},
                {333,  -582, -714},
                {-648, -820, 494},
                {456,  -953, 301},
                {-632, -723, 444},
                {-574, 574,  -664},
                {-646, -898, 542},
                {297,  638,  -899},
                {653,  419,  510},
                {575,  316,  603},
                {208,  665,  -773},
        },
        {

         {458,  528,  759},
                {815,  -505, 673},
                {803,  -747, -545},
                {27,   -5,   -44},
                {488,  416,  -422},
                {-783, -451, 743},
                {-456, 435,  784},
                {836,  -421, 698},
                {-444, 379,  811},
                {-772, -615, -457},
                {-811, 420,  -628},
                {-660, 375,  -671},
                {872,  -781, -609},
                {-754, -443, 867},
                {-690, -485, -452},
                {161,  -99,  34},
                {525,  635,  776},
                {-792, 373,  -623},
                {-503, 435,  838},
                {503,  497,  -552},
                {-692, -760, -439},
                {791,  -798, -578},
                {506,  428,  -662},
                {-720, -473, 708},
                {468,  721,  708},
                {888,  -457, 584},
        },
        {

         {-863, 533,  -771},
                {584,  499,  749},
                {-678, -638, 617},
                {-775, 815,  834},
                {582,  556,  599},
                {-778, 789,  587},
                {-72,  68,   50},
                {676,  -283, -804},
                {-703, -553, -872},
                {-697, 593,  -735},
                {-744, -770, -866},
                {350,  456,  -753},
                {856,  -606, 452},
                {-679, -776, -870},
                {330,  545,  -935},
                {663,  -222, -872},
                {726,  -639, 465},
                {345,  390,  -874},
                {640,  553,  745},
                {-463, -576, 634},
                {107,  6,    -52},
                {-605, 547,  -773},
                {-751, 758,  755},
                {-550, -682, 537},
                {591,  -232, -658},
                {849,  -678, 524},
        },
        {

         {681,  576,  -763},
                {-556, 762,  865},
                {677,  589,  -732},
                {-501, 692,  -731},
                {773,  -725, -694},
                {-574, -689, 890},
                {680,  627,  -733},
                {680,  -685, -709},
                {482,  623,  788},
                {-517, -405, -549},
                {-442, 739,  -815},
                {615,  -738, -641},
                {70,   -144, -18},
                {-436, -407, -592},
                {427,  -863, 772},
                {460,  -821, 813},
                {-525, 635,  831},
                {-371, 698,  846},
                {486,  801,  870},
                {-649, -856, 919},
                {-675, -710, 815},
                {11,   -47,  127},
                {570,  -861, 837},
                {-485, -487, -453},
                {-333, 706,  -729},
                {466,  623,  816},
        },
        {

         {943,  764,  440},
                {-503, -759, 528},
                {-442, -349, -614},
                {-397, -500, -571},
                {-500, -759, 576},
                {134,  53,   -89},
                {643,  -656, 300},
                {580,  -538, 402},
                {-733, 708,  -404},
                {-611, 606,  330},
                {839,  803,  324},
                {-793, 656,  -402},
                {549,  739,  -586},
                {-640, 699,  443},
                {-663, 765,  253},
                {641,  719,  -618},
                {-19,  -105, 35},
                {738,  -468, -803},
                {593,  -388, -785},
                {463,  -470, -790},
                {651,  -632, 427},
                {625,  750,  -583},
                {899,  659,  346},
                {-451, -764, 354},
                {-681, 631,  -461},
                {-395, -368, -619},
        },
        {

         {12,   -48,  -13},
                {546,  471,  469},
                {458,  -377, -445},
                {-748, 448,  -797},
                {-468, -520, 437},
                {-625, 534,  529},
                {-727, 677,  572},
                {331,  -301, 508},
                {-389, -613, -768},
                {486,  357,  486},
                {499,  -445, -454},
                {394,  -371, 513},
                {778,  545,  -627},
                {-509, -528, -763},
                {-842, 350,  -791},
                {-534, -389, 369},
                {-779, 457,  545},
                {-449, -454, -825},
                {644,  595,  -720},
                {423,  -377, -320},
                {-487, -424, 438},
                {342,  399,  468},
                {634,  509,  -695},
                {260,  -360, 535},
                {-787, 514,  -816},
                {-149, 93,   68},
        },
        {

         {887,  -541, 259},
                {842,  -781, -508},
                {840,  641,  570},
                {-740, 823,  501},
                {770,  -664, -493},
                {-11,  123,  -128},
                {907,  -652, 320},
                {-436, 520,  -799},
                {672,  -747, -424},
                {802,  814,  -446},
                {823,  836,  -584},
                {-550, -769, -532},
                {-443, 530,  -719},
                {824,  903,  -442},
                {779,  -701, 234},
                {-798, 882,  536},
                {-582, -801, -488},
                {-757, -445, 600},
                {-628, -513, 687},
                {-642, 861,  521},
                {844,  699,  468},
                {-703, -404, 727},
                {-517, -761, -436},
                {-461, 720,  -767},
                {855,  702,  567},
                {16,   -34,  23},
        },
        {

         {683,  867,  477},
                {-882, -548, -434},
                {-334, 859,  -440},
                {78,   34,   -137},
                {532,  -476, -534},
                {774,  742,  -522},
                {-872, -476, -648},
                {-821, -561, -502},
                {-669, 828,  384},
                {-328, 794,  -436},
                {498,  -540, -465},
                {632,  897,  476},
                {645,  866,  480},
                {-551, 818,  -434},
                {-805, -703, 587},
                {858,  767,  -501},
                {857,  -736, 671},
                {481,  -509, -546},
                {-682, 775,  542},
                {679,  -654, 675},
                {-629, 843,  477},
                {-765, -679, 697},
                {-807, -638, 730},
                {679,  -682, 691},
                {822,  653,  -449},
                {-91,  165,  -26},
        },
        {

         {-462, 585,  -378},
                {-520, -822, 395},
                {-658, 393,  691},
                {-605, 578,  662},
                {-561, 588,  -367},
                {481,  699,  481},
                {-253, -655, -335},
                {65,   -43,  125},
                {-501, -647, 449},
                {505,  -918, 508},
                {514,  -895, -380},
                {452,  700,  -420},
                {-604, -704, 408},
                {448,  789,  -398},
                {590,  722,  -399},
                {393,  603,  387},
                {-314, -766, -315},
                {-564, 527,  -382},
                {-228, -815, -443},
                {-581, 398,  714},
                {499,  -778, -452},
                {503,  -750, 522},
                {430,  -861, -550},
                {453,  482,  491},
                {419,  -809, 475},
                {135,  -163, 8},
        },
        {

         {526,  -799, -839},
                {-356, 606,  -580},
                {644,  -855, 360},
                {523,  645,  -833},
                {665,  464,  323},
                {-721, 751,  587},
                {-520, -821, 539},
                {130,  -69,  -119},
                {-707, 605,  453},
                {-682, 542,  626},
                {-533, -893, 483},
                {551,  645,  -817},
                {567,  -841, -872},
                {729,  -906, 506},
                {-507, -780, 614},
                {502,  -839, -729},
                {-696, -826, -564},
                {696,  447,  404},
                {-712, -762, -509},
                {-439, 674,  -574},
                {469,  823,  -813},
                {657,  -916, 292},
                {729,  498,  392},
                {-789, -704, -533},
                {-357, 544,  -628},
        },
        {

         {475,  -845, -568},
                {481,  531,  608},
                {221,  -878, 762},
                {434,  375,  -722},
                {561,  570,  535},
                {-444, 660,  -315},
                {-803, -476, -511},
                {-516, -740, 875},
                {-142, 28,   123},
                {511,  488,  -676},
                {-661, 427,  510},
                {-622, 664,  -397},
                {-662, -606, 861},
                {-725, -779, 836},
                {347,  -967, 789},
                {-723, 475,  511},
                {-820, -557, -542},
                {488,  570,  512},
                {-187, -152, -9},
                {406,  -842, -458},
                {394,  -844, 717},
                {-593, 421,  593},
                {-622, 680,  -369},
                {522,  360,  -579},
                {394,  -860, -698},
                {-769, -545, -575},
        },
        {

         {385,  700,  -524},
                {449,  -540, -607},
                {711,  302,  505},
                {-697, -534, -744},
                {-381, 269,  588},
                {-914, -493, -738},
                {377,  751,  -414},
                {671,  -462, 962},
                {667,  400,  459},
                {1,    -30,  69},
                {645,  -459, 715},
                {-720, -774, 762},
                {-709, 604,  -745},
                {-650, 569,  -607},
                {-826, -687, 665},
                {-373, 443,  528},
                {-782, -559, 745},
                {614,  -486, 883},
                {697,  546,  520},
                {466,  781,  -532},
                {-381, 398,  501},
                {389,  -374, -643},
                {-629, 697,  -698},
                {-920, -558, -742},
                {403,  -632, -645},
        },
        {

         {-886, -627, 438},
                {-817, 548,  -917},
                {-731, -485, -560},
                {-157, -38,  -169},
                {604,  448,  -869},
                {747,  -402, 633},
                {-642, -437, -487},
                {386,  553,  461},
                {-16,  3,    -35},
                {693,  -580, 653},
                {-766, 741,  -907},
                {494,  517,  -872},
                {340,  476,  348},
                {520,  -778, -584},
                {487,  -727, -572},
                {-756, -401, -539},
                {-856, -576, 439},
                {364,  436,  -887},
                {-649, 299,  581},
                {-604, 351,  409},
                {483,  564,  333},
                {-834, 655,  -850},
                {665,  -580, 637},
                {-700, 347,  518},
                {551,  -761, -503},
                {-855, -614, 442},
        },
        {

         {368,  -350, 569},
                {330,  -357, 609},
                {652,  -745, -677},
                {389,  -302, 780},
                {-768, 728,  -740},
                {254,  593,  -624},
                {255,  508,  -555},
                {242,  448,  424},
                {214,  430,  512},
                {396,  444,  415},
                {-618, -424, -375},
                {-777, -373, 853},
                {-793, -462, 924},
                {-777, 843,  -793},
                {-1,   -52,  33},
                {693,  -709, -686},
                {-641, -405, -335},
                {790,  -739, -746},
                {-102, 51,   183},
                {-745, 693,  -775},
                {374,  553,  -637},
                {-182, 83,   -7},
                {-925, -443, 826},
                {-608, -428, -397},
                {-594, 619,  536},
                {-669, 606,  495},
                {-725, 593,  423},
        },
        {

         {791,  -635, -514},
                {-442, 731,  -735},
                {-665, -753, 553},
                {716,  332,  377},
                {-698, -838, 653},
                {-588, 342,  894},
                {-613, -827, -387},
                {-533, -646, -373},
                {623,  253,  -828},
                {-585, 463,  879},
                {782,  313,  -885},
                {-509, 428,  815},
                {876,  -396, 475},
                {708,  373,  -823},
                {847,  398,  309},
                {-396, 689,  -804},
                {-611, 660,  -758},
                {812,  351,  378},
                {-417, -789, -370},
                {859,  -594, -505},
                {37,   -88,  -20},
                {859,  -559, -380},
                {935,  -467, 448},
                {865,  -530, 453},
                {-713, -673, 543},
        },
        {

         {256,  433,  -509},
                {-829, -862, 594},
                {235,  240,  -479},
                {-833, 620,  810},
                {648,  -727, 563},
                {-680, -810, -308},
                {739,  -865, -395},
                {476,  295,  623},
                {-835, 572,  942},
                {428,  373,  625},
                {-773, -835, 606},
                {740,  -884, -491},
                {270,  290,  -478},
                {12,   -55,  72},
                {-788, 577,  961},
                {632,  -573, 486},
                {-487, -759, -318},
                {-573, -827, -375},
                {-168, 26,   22},
                {-711, 501,  -353},
                {-780, 611,  -356},
                {605,  -625, 706},
                {808,  -818, -360},
                {-132, -156, 138},
                {-792, 371,  -338},
                {-773, -889, 653},
                {378,  470,  609},
        },
        {

         {-482, -652, -465},
                {421,  663,  -623},
                {423,  -587, -532},
                {-405, -518, 816},
                {-597, 679,  892},
                {-506, -544, 789},
                {442,  -483, 807},
                {619,  639,  911},
                {-467, -568, 725},
                {437,  -648, 727},
                {-611, 628,  784},
                {775,  585,  827},
                {-726, 677,  -742},
                {787,  619,  857},
                {418,  -639, -706},
                {346,  578,  -486},
                {-73,  36,   -2},
                {508,  -541, 699},
                {-804, 584,  -639},
                {-448, -825, -420},
                {-152, 153,  119},
                {-609, 579,  820},
                {423,  -590, -484},
                {329,  566,  -706},
                {-735, 512,  -768},
                {-359, -699, -393},
        },
        {

         {845,  541,  -613},
                {-781, 879,  863},
                {876,  -508, 745},
                {-613, -423, 720},
                {776,  575,  -549},
                {-5,   63,   -9},
                {-747, 849,  704},
                {662,  -829, -549},
                {-448, -455, -814},
                {764,  524,  -582},
                {-719, 562,  -443},
                {861,  865,  580},
                {-810, 871,  739},
                {876,  -839, -621},
                {809,  901,  694},
                {788,  817,  669},
                {870,  -291, 786},
                {-630, -485, 505},
                {-520, -383, -807},
                {808,  -778, -634},
                {-533, -379, 592},
                {-717, 837,  -456},
                {874,  -285, 721},
                {-799, 707,  -461},
                {-461, -422, -684},
        },
        {

         {-449, -332, 749},
                {701,  -823, -551},
                {-577, -454, -608},
                {-508, -457, -498},
                {-496, -455, 677},
                {-558, 450,  658},
                {13,   -107, -43},
                {667,  -754, -615},
                {593,  577,  509},
                {405,  739,  -708},
                {414,  -559, 835},
                {-323, -421, 722},
                {522,  671,  484},
                {-496, -439, -738},
                {-509, 445,  436},
                {-107, -14,  100},
                {-453, 841,  -537},
                {560,  -693, 821},
                {-561, 450,  610},
                {-455, 709,  -489},
                {718,  -742, -582},
                {680,  741,  -721},
                {-500, 860,  -532},
                {535,  821,  -703},
                {585,  553,  382},
                {623,  -520, 796},
        },
        {

         {90,   6,    56},
                {-591, 397,  -576},
                {797,  658,  -786},
                {487,  -530, -403},
                {-633, 268,  -578},
                {569,  455,  814},
                {817,  522,  -655},
                {494,  -615, -279},
                {789,  610,  -604},
                {-505, -567, 580},
                {601,  -911, 774},
                {-540, -466, 507},
                {-67,  -31,  167},
                {-783, 417,  731},
                {-595, 261,  -675},
                {608,  535,  741},
                {-422, -698, -808},
                {-42,  -188, -11},
                {569,  528,  837},
                {-790, 471,  776},
                {-511, -767, -768},
                {586,  -808, 939},
                {-813, 542,  653},
                {593,  -851, 934},
                {-490, -420, 586},
                {-576, -785, -768},
                {461,  -707, -349},
        },
        {

         {-769, -495, -877},
                {-643, 498,  -451},
                {-692, -749, 573},
                {-718, -407, -849},
                {724,  722,  -724},
                {662,  -546, 730},
                {379,  603,  329},
                {642,  592,  -778},
                {627,  -482, -668},
                {-609, 681,  -427},
                {-496, 673,  472},
                {-900, -359, -857},
                {313,  516,  424},
                {-493, 655,  499},
                {700,  -562, -629},
                {725,  660,  -772},
                {448,  456,  404},
                {27,   56,   -148},
                {723,  -489, -629},
                {539,  -475, 753},
                {617,  -600, 723},
                {-690, -620, 531},
                {-789, -756, 535},
                {-604, 459,  -435},
                {-597, 636,  512},
                {-86,  149,  0},
        },
        {

         {748,  739,  -711},
                {-548, 605,  -645},
                {693,  668,  509},
                {-644, 804,  719},
                {725,  772,  -649},
                {595,  -267, 444},
                {-483, -510, -780},
                {-568, 825,  605},
                {717,  -247, 475},
                {-726, 565,  -621},
                {-456, -597, 878},
                {675,  710,  718},
                {501,  -488, -418},
                {-60,  15,   -29},
                {-14,  110,  137},
                {-722, 849,  675},
                {-337, -507, -706},
                {744,  -274, 527},
                {543,  -619, -532},
                {681,  787,  600},
                {729,  762,  -671},
                {-505, -462, -671},
                {-510, -599, 765},
                {-353, -622, 865},
                {-787, 568,  -622},
                {523,  -389, -573},
        },
        {

         {-504, -662, 562},
                {887,  -780, 572},
                {-375, 263,  -361},
                {482,  366,  -385},
                {667,  302,  -366},
                {753,  -590, -657},
                {-675, -703, -625},
                {588,  336,  876},
                {-465, -669, 466},
                {102,  -38,  -49},
                {636,  429,  -400},
                {-547, -692, -722},
                {143,  -166, 94},
                {-465, -742, 489},
                {917,  -655, 650},
                {-608, 480,  464},
                {894,  -726, 527},
                {-371, 441,  -443},
                {607,  -649, -571},
                {696,  -562, -687},
                {-614, 412,  547},
                {493,  423,  810},
                {-660, -615, -768},
                {-560, 542,  465},
                {-355, 441,  -415},
                {568,  276,  741},
        },
        {

         {561,  525,  -401},
                {-512, 428,  -792},
                {-435, 648,  422},
                {835,  -512, -363},
                {-419, -441, 564},
                {404,  398,  527},
                {-453, -620, -600},
                {645,  602,  -311},
                {409,  -310, 910},
                {320,  -492, 890},
                {-475, 758,  446},
                {-381, -564, -613},
                {642,  452,  -355},
                {-570, 452,  -869},
                {782,  -521, -478},
                {-494, -695, -587},
                {-368, -587, 649},
                {254,  -371, 895},
                {443,  386,  727},
                {817,  -544, -513},
                {-358, -373, 577},
                {474,  373,  543},
                {-433, 791,  487},
                {-49,  -83,  -82},
                {-29,  17,   101},
                {-448, 483,  -776},
        },
        {

         {531,  706,  891},
                {-716, 820,  -612},
                {480,  643,  843},
                {414,  -782, 449},
                {-510, -828, -707},
                {-830, 447,  555},
                {-439, -769, -680},
                {346,  -725, 535},
                {-573, -758, -702},
                {-869, -354, 544},
                {-51,  56,   52},
                {-831, 429,  743},
                {363,  -792, 642},
                {-881, -333, 647},
                {-881, 805,  -502},
                {308,  -705, -777},
                {-972, -429, 563},
                {-796, 772,  -602},
                {385,  616,  -340},
                {289,  -609, -778},
                {355,  -740, -846},
                {576,  534,  839},
                {-848, 335,  630},
                {299,  695,  -261},
                {420,  692,  -276},
        },
        {

         {537,  351,  808},
                {-595, 821,  775},
                {311,  464,  -493},
                {4,    -68,  95},
                {296,  461,  -372},
                {628,  -456, -434},
                {-829, -573, 418},
                {660,  -424, -390},
                {-804, 622,  -649},
                {595,  -464, -338},
                {-594, -478, -326},
                {-856, 450,  -604},
                {-764, -444, -410},
                {-701, -524, 332},
                {-809, -684, 357},
                {781,  -821, 825},
                {647,  336,  643},
                {-520, 709,  757},
                {-708, 727,  758},
                {-692, -561, -395},
                {835,  -780, 698},
                {-808, 513,  -553},
                {637,  384,  723},
                {375,  540,  -458},
                {706,  -712, 785},
        },
        {

         {609,  700,  -441},
                {-639, -525, 611},
                {-670, 913,  641},
                {-666, 802,  643},
                {-530, 632,  -267},
                {-570, -310, -380},
                {4,    108,  47},
                {736,  -803, -469},
                {478,  658,  -555},
                {850,  484,  452},
                {-527, 679,  -409},
                {523,  -274, 742},
                {514,  -372, 612},
                {-622, -321, -370},
                {-559, -360, -268},
                {708,  678,  -596},
                {-543, 745,  -311},
                {450,  -449, 716},
                {663,  -757, -550},
                {-512, -525, 514},
                {830,  606,  421},
                {586,  -847, -466},
                {823,  457,  504},
                {-74,  -67,  -57},
                {-587, -479, 514},
                {-773, 864,  724},
        },
        {

         {-710, -818, 544},
                {-668, -774, -635},
                {-738, 478,  -287},
                {370,  -596, 950},
                {426,  248,  -726},
                {-14,  -51,  -42},
                {384,  427,  632},
                {475,  -502, 906},
                {478,  246,  -786},
                {331,  -480, 846},
                {528,  -486, -604},
                {-803, 350,  -356},
                {435,  -599, -633},
                {-668, -857, -561},
                {-805, -778, 526},
                {-95,  -159, 77},
                {-709, -958, -671},
                {415,  462,  648},
                {395,  430,  556},
                {369,  -409, -656},
                {-487, 303,  484},
                {503,  305,  -674},
                {-855, -846, 537},
                {-466, 232,  503},
                {-393, 249,  436},
                {-817, 611,  -358},
        },
        {

         {-771, -358, 508},
                {-779, -551, -456},
                {-737, 410,  307},
                {532,  404,  573},
                {544,  495,  692},
                {-733, -632, -529},
                {-656, -411, 517},
                {500,  -754, 677},
                {630,  339,  -362},
                {-621, -376, 540},
                {477,  -816, 644},
                {-348, 530,  -678},
                {58,   -105, -2},
                {702,  -678, -484},
                {-823, -548, -606},
                {496,  -776, 667},
                {481,  422,  -369},
                {-790, 310,  409},
                {508,  370,  -342},
                {682,  -637, -714},
                {-833, 445,  388},
                {-425, 634,  -742},
                {150,  49,   86},
                {-250, 660,  -669},
                {550,  613,  615},
                {724,  -523, -583},
        },
        {

         {-686, -725, -427},
                {797,  -585, -592},
                {-466, 489,  -350},
                {1,    73,   26},
                {-512, -244, 730},
                {738,  822,  695},
                {662,  -561, -567},
                {753,  407,  -355},
                {586,  -614, -625},
                {-716, 594,  489},
                {644,  -781, 816},
                {681,  950,  724},
                {-631, -709, -363},
                {633,  -731, 928},
                {-662, -802, -485},
                {-741, 610,  559},
                {678,  436,  -522},
                {779,  511,  -501},
                {-323, 554,  -348},
                {-728, 794,  528},
                {168,  163,  -47},
                {-589, -334, 646},
                {-356, 513,  -390},
                {-662, -288, 727},
                {796,  927,  749},
                {696,  -770, 826}}
};

static std::vector<std::vector<PointT>> input_test = {
        {
                {404,  -588, -901},
                {528,  -643, 409},
                {-838, 591, 734},
                {390,  -675, -793},
                {-537, -823, -458},
                {-485, -357, 347},
                {-345, -311, 381},
                {-661, -816, -575},
                {-876, 649,  763},
                {-618, -824, -621},
                {553,  345,  -567},
                {474,  580,  667},
                {-447, -329, 318},
                {-584, 868,  -557},
                {544,  -627, -890},
                {564,  392,  -477},
                {455,  729,  728},
                {-892, 524,  684},
                {-689, 845,  -530},
                {423,  -701, 434},
                {7,   -33,  -71},
                {630,  319,  -379},
                {443,  580,  662},
                {-789, 900,  -551},
                {459,  -707, 401},
        },
        {

                {686,  422,  578},
                {605,  423,  415},
                {515,  917, -361},
                {-336, 658,  858},
                {95,   138,  22},
                {-476, 619,  847},
                {-340, -569, -846},
                {567,  -361, 727},
                {-460, 603,  -452},
                {669,  -402, 600},
                {729,  430,  532},
                {-500, -761, 534},
                {-322, 571,  750},
                {-466, -666, -811},
                {-429, -592, 574},
                {-355, 545,  -477},
                {703,  -491, -529},
                {-328, -685, 520},
                {413,  935,  -424},
                {-391, 539,  -444},
                {586, -435, 557},
                {-364, -763, -893},
                {807,  -499, -711},
                {755,  -354, -619},
                {553,  889,  -390},
        },
        {

                {649,  640,  665},
                {682,  -795, 504},
                {-784, 533, -524},
                {-644, 584,  -595},
                {-588, -843, 648},
                {-30,  6,    44},
                {-674, 560,  763},
                {500,  723,  -460},
                {609,  671,  -379},
                {-555, -800, 653},
                {-675, -892, -343},
                {697,  -426, -610},
                {578,  704,  681},
                {493,  664,  -388},
                {-671, -858, 530},
                {-667, 343,  800},
                {571,  -461, -707},
                {-138, -166, 112},
                {-889, 563,  -600},
                {646,  -828, 498},
                {640, 759,  510},
                {-630, 509,  768},
                {-681, -892, -333},
                {673,  -379, -804},
                {-742, -814, -386},
                {577, -820, 562},
        },
        {

                {-589, 542,  597},
                {605,  -692, 669},
                {-500, 565, -823},
                {-660, 373,  557},
                {-458, -679, -417},
                {-488, 449,  543},
                {-626, 468,  -788},
                {338,  -750, -386},
                {528,  -832, -391},
                {562,  -778, 733},
                {-938, -730, 414},
                {543,  643,  -506},
                {-524, 371,  -870},
                {407,  773,  750},
                {-104, 29,   83},
                {378,  -903, -323},
                {-778, -728, 485},
                {426,  699,  580},
                {-438, -605, -362},
                {-469, -447, -387},
                {509, 732,  623},
                {647,  635,  -688},
                {-868, -804, 481},
                {614,  -800, 639},
                {595,  780,  -596},
        },
        {

                {
                 727,  592,  562},
                {
                 -293, -554, 779},
                {
                 441,  611, -461},
                {
                 -714, 465,  -776},
                {
                 -743, 427,  -804},
                {
                 -660, -479, -426},
                {
                 832,  -632, 460},
                {
                 927,  -485, -438},
                {
                 408,  393,  -506},
                {
                 466,  436,  -512},
                {
                 110,  16,   151},
                {
                 -258, -428, 682},
                {
                 -393, 719,  612},
                {
                 -211, -452, 876},
                {
                 808,  -476, -593},
                {
                 -575, 615,  604},
                {
                 -485, 667,  467},
                {
                 -680, 325,  -822},
                {
                 -627, -443, -432},
                {
                 872,  -547, -609},
                {
                 833, 512,  582},
                {
                 807,  604,  487},
                {
                 839,  -516, 451},
                {
                 891,  -625, 532},
                {
                 -652, -548, -490},
                {
                 30,  -46,  -14},
        }
};

static auto &input = input_real;
//static auto &input = input_test;


PointT get_sign_permutations(const PointT &point, int coord) {

    switch (coord) {
        case 0:
            return PointT{point.x, point.y, point.z};
        case 1:
            return PointT{-point.x, point.y, point.z};
        case 2:
            return PointT{point.x, -point.y, point.z};
        case 3:
            return PointT{point.x, point.y, -point.z};
        case 4:
            return PointT{-point.x, -point.y, point.z};
        case 5:
            return PointT{point.x, -point.y, -point.z};
        case 6:
            return PointT{-point.x, point.y, -point.z};
        case 7:
            return PointT{-point.x, -point.y, -point.z};
    }
    assert(false);
}

std::vector<PointT> get_coord_permutations(const PointT &point) {
    //xyz
    //xzy
    //yxz
    //yzx
    //zxy
    //zyx
    std::vector<PointT> out;
    out.emplace_back(PointT{point.x, point.y, point.z});
    out.emplace_back(PointT{point.x, point.z, point.y});
    out.emplace_back(PointT{point.y, point.x, point.z});
    out.emplace_back(PointT{point.y, point.z, point.x});
    out.emplace_back(PointT{point.z, point.x, point.y});
    out.emplace_back(PointT{point.z, point.y, point.x});
    return out;
}

std::vector<PointT> get_reversed_coord_permutations(const PointT &point) {
    //xyz
    //xzy
    //yxz
    //yzx
    //zxy
    //zyx
    std::vector<PointT> out;
    out.emplace_back(PointT{point.x, point.y, point.z});
    out.emplace_back(PointT{point.x, point.z, point.y});
    out.emplace_back(PointT{point.y, point.x, point.z});
    out.emplace_back(PointT{point.z, point.x, point.y});
    out.emplace_back(PointT{point.y, point.z, point.x});
    out.emplace_back(PointT{point.z, point.y, point.x});
    return out;
}

std::vector<PointT> get_all_permutations(const PointT &point) {
    std::vector<PointT> result;
    for (int i = 0; i < 8; i++) { // sign permutations
        for (auto p: get_coord_permutations(point)) {
            result.push_back(get_sign_permutations(p, i));
        }
    }
    return result;
}

std::vector<PointT> get_reversed_permutations(const PointT &point) {
    std::vector<PointT> result;
    for (int i = 0; i < 8; i++) { // sign permutations
        for (auto p: get_reversed_coord_permutations(get_sign_permutations(point, i))) {
            result.push_back(p);
        }
    }
    return result;
}

constexpr size_t NR_PERMUTATIONS = 48;

std::vector<std::vector<PointT>> get_scanner_permutations(const std::vector<PointT> &scanner_points) {
    std::vector<std::vector<PointT>> scanner_permutations(NR_PERMUTATIONS);
    for (const auto &point: scanner_points) {
        auto point_permutations = get_all_permutations(point);
        assert(point_permutations.size() == NR_PERMUTATIONS);
        for (int i = 0; i < NR_PERMUTATIONS; i++) {
            scanner_permutations[i].push_back(point_permutations[i]);
        }
    }
    return scanner_permutations;
}

static inline auto distance(PointT source, PointT target) {
    return PointT{target.x - source.x, target.y - source.y, target.z - source.z};
}

std::vector<std::tuple<PointT, std::set<PointT>>> get_distances(const std::vector<PointT> &points) {
    std::vector<std::tuple<PointT, std::set<PointT>>> distances;
    for (int i = 0; i < points.size(); i++) {
        std::set<PointT> distance_from_i_to_j;
        for (int j = 0; j < points.size(); j++) {
            distance_from_i_to_j.insert(distance(points[i], points[j]));
        }

        distances.emplace_back(points[i], std::move(distance_from_i_to_j));
    }
    return distances;
}

int size_of_intersection(const auto &first, const auto &second) {
    std::vector<PointT> out;
    std::set_intersection(first.begin(), first.end(), second.begin(), second.end(), std::back_inserter(out));
    return out.size();
}

bool search_overlapping_scanners(std::set<PointT> &unique_points, std::set<int> &added_scanners,
                                 std::map<std::tuple<int, int>, std::tuple<PointT, int>> &correction_map,
                                 const std::vector<PointT> &interfacing_points, int interfacing_scanner) {

    const auto distances_from_basepoint0 = get_distances(interfacing_points);
    for (int scan_nr = 0; scan_nr < input.size(); scan_nr++) {

        if (scan_nr == interfacing_scanner) {
            continue;
        }

        auto scanner1_permutations = get_scanner_permutations(input[scan_nr]);
        for (int scan1_permutation_nr = 0; scan1_permutation_nr < NR_PERMUTATIONS; scan1_permutation_nr++) {
            const auto distances_from_basepoint1 = get_distances(scanner1_permutations[scan1_permutation_nr]);

            for (int scan0_distance_nr = 0; scan0_distance_nr < distances_from_basepoint0.size(); scan0_distance_nr++) {
                for (int scan1_distance_nr = 0;
                     scan1_distance_nr < distances_from_basepoint1.size(); scan1_distance_nr++) {
                    auto &[base_point0, distances_0] = distances_from_basepoint0[scan0_distance_nr];
                    auto &[base_point1, distances_1] = distances_from_basepoint1[scan1_distance_nr];

                    auto intersection_nr = size_of_intersection(distances_0, distances_1);
                    if (intersection_nr == 12) {
                        // recalculate scan1 points w.r.t. correction distance and permutation nr
                        auto correction = distance(base_point0, base_point1);
                        correction_map[{interfacing_scanner, scan_nr}] = {correction, scan1_permutation_nr};
                        continue;
                    }
                }
            }
        }
    }
    return false;
}

std::map<std::tuple<int, int>, int> manhattan_distance;

void calculate_manhattan_distance_from(const std::vector<int> &search_path, std::set<PointT> &unique_points,
                                       std::set<int> &added_scanners,
                                       std::map<std::tuple<int, int>, std::tuple<PointT, int>> &correction_map,
                                       int search_depth) {
    int interfacing_scan = search_path.back();
    std::vector<int> overlapping_scans;
    for (auto[key, value]: correction_map) {
        auto[from, to] = key;
        if (from == interfacing_scan) {
            overlapping_scans.push_back(to);
        }
    }

    for (int overlapping_scan: overlapping_scans) {

        if (auto cyclic = std::find(search_path.begin(), search_path.end(), overlapping_scan); cyclic !=
                                                                                               search_path.end()) {
            continue;
        }

        auto new_search_path = search_path;
        new_search_path.push_back(overlapping_scan);

        PointT station_in_overlapping_scan = {0, 0, 0};
        for (int search_path_index = new_search_path.size() - 2; search_path_index >= 0; search_path_index--) {
            auto[correction, permutation] = correction_map.at(
                    {new_search_path[search_path_index], new_search_path[search_path_index + 1]});

            station_in_overlapping_scan = get_all_permutations(station_in_overlapping_scan)[permutation];
            station_in_overlapping_scan.x -= correction.x;
            station_in_overlapping_scan.y -= correction.y;
            station_in_overlapping_scan.z -= correction.z;

            int distance = abs(station_in_overlapping_scan.x) + abs(station_in_overlapping_scan.y) +
                           abs(station_in_overlapping_scan.z);
            manhattan_distance[{overlapping_scan, new_search_path[search_path_index]}] = distance;
        }

        if (search_depth - 1 > 0) {
            calculate_manhattan_distance_from(new_search_path, unique_points, added_scanners, correction_map,
                                              search_depth - 1);
        }
    }
}

void calculate_manhattan_distance_to(const std::vector<int> &search_path, std::set<PointT> &unique_points,
                                     std::set<int> &added_scanners,
                                     std::map<std::tuple<int, int>, std::tuple<PointT, int>> &correction_map,
                                     int search_depth) {
    int interfacing_scan = search_path.back();
    std::vector<int> overlapping_scans;
    for (auto[key, value]: correction_map) {
        auto[from, to] = key;
        if (to == interfacing_scan) {
            overlapping_scans.push_back(from);
        }
    }

    for (int overlapping_scan: overlapping_scans) {

        if (auto cyclic = std::find(search_path.begin(), search_path.end(), overlapping_scan); cyclic !=
                                                                                               search_path.end()) {
            continue;
        }

        auto new_search_path = search_path;
        new_search_path.push_back(overlapping_scan);

        PointT station_in_overlapping_scan = {0, 0, 0};
        for (int search_path_index = new_search_path.size() - 2; search_path_index >= 0; search_path_index--) {
            auto[correction, permutation] = correction_map.at(
                    {new_search_path[search_path_index + 1], new_search_path[search_path_index]});

            station_in_overlapping_scan.x += correction.x;
            station_in_overlapping_scan.y += correction.y;
            station_in_overlapping_scan.z += correction.z;
            station_in_overlapping_scan = get_reversed_permutations(station_in_overlapping_scan)[permutation];

            int distance = abs(station_in_overlapping_scan.x) + abs(station_in_overlapping_scan.y) +
                           abs(station_in_overlapping_scan.z);
            manhattan_distance[{overlapping_scan, new_search_path[search_path_index]}] = distance;
        }

        if (search_depth - 1 > 0) {
            calculate_manhattan_distance_from(new_search_path, unique_points, added_scanners, correction_map,
                                              search_depth - 1);
        }
    }
}

void
add_unique_points(const std::vector<int> &search_path, std::set<PointT> &unique_points, std::set<int> &added_scanners,
                  std::map<std::tuple<int, int>, std::tuple<PointT, int>> &correction_map, int search_depth) {

//    std::cout << "Search path ";
//    for (int segment: search_path) {
//        std::cout << segment << " -> ";
//    }
//    std::cout << std::endl;

    int interfacing_scan = search_path.back();
    std::vector<int> overlapping_scans;
    for (auto[key, value]: correction_map) {
        auto[from, to] = key;
        if (from == interfacing_scan) {
            overlapping_scans.push_back(to);
        }
    }

    for (int overlapping_scan: overlapping_scans) {

        if (auto cyclic = std::find(search_path.begin(), search_path.end(), overlapping_scan); cyclic !=
                                                                                               search_path.end()) {
            continue;
        }

        auto new_search_path = search_path;
        new_search_path.push_back(overlapping_scan);

        if (!added_scanners.contains(overlapping_scan)) {
//            std::cout << "Add  " << overlapping_scan << std::endl;
            for (auto original_scan1_point: input[overlapping_scan]) {
                for (int search_path_index = new_search_path.size() - 2; search_path_index >= 0; search_path_index--) {
                    auto[correction, permutation] = correction_map.at(
                            {new_search_path[search_path_index], new_search_path[search_path_index + 1]});

                    original_scan1_point = get_all_permutations(original_scan1_point)[permutation];
                    original_scan1_point.x -= correction.x;
                    original_scan1_point.y -= correction.y;
                    original_scan1_point.z -= correction.z;
                }
                unique_points.insert(original_scan1_point);
            }
            added_scanners.insert(overlapping_scan);
        }

        if (search_depth - 1 > 0) {
            add_unique_points(new_search_path, unique_points, added_scanners, correction_map, search_depth - 1);
        }
    }

}

bool all_distances_calculated() {
    for (int i = 0; i < input.size(); i++) {
        for (int j = 0; j < input.size(); j++) {
            if (i != j) {
                if (!manhattan_distance.contains({i, j}) && !manhattan_distance.contains({j, i})) {
                    return false;
                }
            }
        }
    }
    return true;
}

int _19() {
    assert(get_all_permutations({1, 2, 3}).size() == NR_PERMUTATIONS);
    assert(get_reversed_permutations({1, 2, 3}).size() == NR_PERMUTATIONS);

    for (int i = 0; i < NR_PERMUTATIONS; i++) {
        PointT before{1, 2, 3};
        PointT after = get_all_permutations(before)[i];
        PointT after_after = get_reversed_permutations(after)[i];
        assert(before == after_after);
    }


    std::set<PointT> unique_points{input[0].begin(), input[0].end()};
    std::set<int> added_scanners;
    added_scanners.insert(0);

    // {by converting from - to}{use offset and permutation}
    std::map<std::tuple<int, int>, std::tuple<PointT, int>> correction_map;
    for (int interfacing_scanner = 0; interfacing_scanner < input.size(); interfacing_scanner++) {
        std::vector<PointT> interfacing_points = input[interfacing_scanner];
        search_overlapping_scanners(unique_points, added_scanners, correction_map, interfacing_points,
                                    interfacing_scanner);

    }

    std::cout << "--correction map--" << std::endl;
    for (auto&[key, value]: correction_map) {
        auto[from, to] = key;
        std::cout << " - " << from << " -> " << to << std::endl;
    }

    size_t search_depth = 0;
    std::cout << "search for overlapping chains of length: ";
    while (added_scanners.size() < input.size()) {
        std::cout << search_depth << " ";
        add_unique_points({0}, unique_points, added_scanners, correction_map, search_depth);
        search_depth++;
    }
    std::cout << std::endl;

    myprint(correction_map.size());

    std::cout << "--PART1--" << std::endl;
    myprint(unique_points.size());

    std::cout << "--PART2--" << std::endl;

    search_depth = 0;
    std::cout << "search for overlapping chains of length: ";
    while (!all_distances_calculated()) {
        for (int i = 0; i < input.size(); i++) {
            calculate_manhattan_distance_from({i}, unique_points, added_scanners, correction_map, search_depth);
            // apparently this step is not necessary, but let it be here since I already wrote it
            calculate_manhattan_distance_to({i}, unique_points, added_scanners, correction_map, search_depth);
        }
        search_depth++;

        int max_distance = INT_MIN;
        for (auto[key, value]: manhattan_distance) {
            max_distance = std::max(max_distance, value);
        }
        std::cout << search_depth << " (max_distance = " << max_distance << ") ";
    }
    std::cout << std::endl;

    std::cout << "--distance map--" << std::endl;

    int max_distance = INT_MIN;
    for (auto[key, value]: manhattan_distance) {
        auto[from, to] = key;
        std::cout << from << " -> " << to << " = " << value << std::endl;
        max_distance = std::max(max_distance, value);
    }

    myprint(max_distance);

    return 0;
}
