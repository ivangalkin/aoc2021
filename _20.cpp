#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#include <iostream>
#include <string_view>
#include <tuple>
#include <set>
#include <map>
#include <algorithm>
#include <sstream>
#include <list>

#include <regex>

#define myprint(arg) std::cout << "" #arg << " = " << arg << std::endl;

using namespace std::string_view_literals;


static std::string algorithm_test = "..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..##"
                                    "#..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###"
                                    ".######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#."
                                    ".#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#....."
                                    ".#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#.."
                                    "...####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#....."
                                    "..##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#";

static std::vector<std::string> image_test = {
        "#..#.",
        "#....",
        "##..#",
        "..#..",
        "..###"
};

static std::string algorithm_real =



static std::vector<std::string> image_real = {
        "..#.#...##.......#.####...##....##.###.####.##..###..#####......##.###.##.##.#...#....#####.#####.##",
        ".###.#####...##....#.##...#.###.#.#.####.......#.##.#.#.#.###..####.####.#...###.#.#.#.....###......",
        "#..##..#.##.#...#.##..#.##.#####.###.###....##.#...#...#.##.#..#..###.####..#..####.....#####.#.#..#",
        ".######........####.##.....####.###..###.####..#....##.###.#..#..####.#..##.###.#.#..#.#.###.##.##.#",
        ".#.##.#.#...#..#.#.###.###.###.###.########..#..#...######....###.#..##.#.##...###..#..#..#.#.##....",
        "#.#..##.#....#.#.#...#.....#..##.#.####.#.###.##.###.####.#.#.##.#..#.#.......#....#.#####...#..##.#",
        ".##....##.########.#####....##.#..##.#######.##.##.#...#..##.#.#####.....#...##..#.#.#.##.##....##..",
        "#.##.#.##..##..##.#......##.#.##..#.##..#.#..#.........#..#.#.##.##.#....##.##..#.##.##.#.##..##..#.",
        ".....#####.#........###.#.##.######....###..##.#..#.###..#..####.##..###.###.#.###..#..####.##......",
        ".#.#.######..##.#..##..##.#.......#....#..#.#####.#....#....####..##...##.#.....#.###...##.#.#....##",
        "..#####...#.##.#.##..#..#....#.###.#####.#.##..#...#....#...#.###...##....#####.#....#..#......##.#.",
        ".#.#.#..#..#.#.#.....#.###..#..##.#.......#...#..#..###.....#...#......#.#.####....#...#.#.....##.##",
        ".#.##.#..######..#...#######.###.#...#.#.##.....##.####...##.##.##.#...##.#.#....#.#.....#.#..#....#",
        "###.########..##.#.#...#.##..#.#.....#.##..###.#..#...#.#.####....#..##..#.#..##.#..#..#.....#.###..",
        "...######...#...##.#.#...###..##.###.####.....#.#.#...##..#.####.#.####...########..#.#......###..##",
        "##..####.####....##....#..#.##.###...#.####....##.....##......#.....#..#.##.###.##..##.....##..#...#",
        "#..##.######.#.#.#..#.#.###....###.#.#...#..###...##..###....###....#.###.#.#...#.###.#...##.##.#.#.",
        ".######.##.#.####.#..#...##.....##.##..#.#.#..##....#.####.#..#..##.#.#.#.......#...##...###.###.##.",
        "#.#.######.#.####.....#.#.##.#.####..#####.#.##.#..#.#..#####.####.##..##.#....#..#...#.##..###.###.",
        "###.###....####...#.###.#.####..###.#..###..#.##.#.##..##..#.####...#########.##.####.####...#.###..",
        "#.##..##..#.##.#.##.##..#.##..#####.#.###.#...##.#.##.###..##.#.##.#..####.####...###.#.#.#...####.#",
        "..####..########..#.#.#.#.###.#..#...###..###.#..#####.##.#....##.#..##.##......#..###.##..##...#..#",
        ".#..#...#..##..#..####.#.#.#.#...#.##...##...#########.##..#.###..##.###.....#.#...###...###.####..#",
        ".#.......#.##.#..###.#......#..###..#...##.###...#.#.#.###....####..##.##...##.####..#..#.#..#####.#",
        "#.#.#####..#.#.#######...###.###.##..#.#.#.#....#.###....#.#.#####.###..#..#........##.#.#.....#..##",
        "#.##...##...#..#########.###.....######.....##.#.#.##.###..#..#...####..##..#..#.#..#.#.####.#..#...",
        "..#.#..#..####.#.##.#...###.###.#.#..##..##.##.##.###.....#..##.###..##..#..#.......###...#.##...###",
        ".##.##.##.......#........#.##..#.###...##....###.##..#..#....##.##..####.##.#.####..#.#.#.#.#.#.#.##",
        ".#..#.#..####....##.##.#...###..##.#.#####.###.#.##..###.##...######.#.#...#...#..#.#.#.#..#..######",
        ".###.##..#..#..###...#.#.#...##..#...##...##.#.#####.##.#.######.##..#.#####.####.#.....#.##.###.#.#",
        ".###.######...#.####...#.#..#...##...###.###########.#.##.#######.##.##.###..###...#####...#.#..####",
        ".####...#.#...#..####.#.##...#.##..#..#..###.#.##..#.##..#...##.#...#########.#..#....##..#...##....",
        ".##.##.####.###...#####.#.##.#...###.###.#.#.#####.#..###.##.#..##.####.....#.....#.####.##.#.##.###",
        "###.....#.##...#.##....#...#.#.#.#..#..##.....###..##.###..#....#.....#####..########.#.###.##.#####",
        "..#.......#.#..#..#..##.#...#####..#..###.#..#.#.#...####.#.....####.#..###.#...##.####.##.#.#..#.#.",
        "#.###..###..#.####.#.####.####..#.##.#.....#...######..##..###..##..#.#####...##....#.##.#.##.##.###",
        "###..#...#########...####..#.###...####.#..#.###.....#.#....####....###.###...#.###.#..#...#.###..#.",
        "...####.#..#.##.###.#.#..#.##.#.####....##.##.#.#.#..#.##..#.#...#.##.###..###...#..#..#.#.#.##....#",
        "##.#.#...##...##.##.#.##..#......###..#..#....##.#.##.##.#####..##....###..###.#....##..##....#..###",
        ".#.#.##..##.#.........#..#..#.#.##..#.##...#.#.###.###.#####...#.###.##..###.#.##.#.#.......##....#.",
        "#..#.###.##.###.##...#.#...##..#.#.##..##..#..##..###....##..#...#####.....#.#.#####.#.#.##..##.##.#",
        "#..#.##..##......##.#.##.####...#..#..#..##..#.##.#######.##.#....##..##.##.##..###.#...####.#.##..#",
        "#.....###.####..#.#####.#.###.##....####..#.##..#....#####..###.#.#.#.###...#.#.#.#.##...##.####.##.",
        "#..#.#..#..#.#...#.#.#...#.#.##......#..###.##.#.###..###...#.#..##..#....#.####..#.#####.######....",
        "#...#.#..#####.##..####..#.#####.....##...#..####.##..........#.#.....##.##.#.#.####.###...#......#.",
        "###.######.####.##.###.#....#####.....###.##..##..##.######.#.#...##.##.##.###...##..####..##..#.#.#",
        "##...####..##...#..#.#.##..###.##..#.####...#..##.#.#.....######..##..#..#.##...##.##.#....#########",
        "..#...###..#.##.#...###.##.#.########.....#..#...#.#.#....#..######.##.#####.#.##....###.#......##.#",
        "#.###.#..#.....######.#..#..###.#...####.##...####.#...#...####.##..###..#.##.#######....##.#..#####",
        "##..##...#..##.#.#.....#.#.#.###.####.##.###..#..####...#########.#.#.##...#.#..###.##.#.###.#.##..#",
        ".#...#....###.#.###..####..#.##..#..##..##......#.#..##....#...##.#...#.#.....###.#...#.##....##....",
        ".#.............#####.....#.###.###.#.######.......#.#.#...####......#...#..####...##.##.###....#.###",
        "....##########.#.#..####.......#.#......#####.##.##....#..#.#.###..#...#..#..##..#..##.#..#..#.....#",
        "......#####..####.#..##.#.#.##..#.###......#...##..####....#...##..#..#.####.##.#...##.###.#..###...",
        "##......#..#.###.#....#...#..#..##.###..#.##..####.#.##..##..##..##.#....#.##.##.#..........####.#.#",
        "###....##.#.##.##.#####.##.#.##..##.##.#..###...#..#..##.....##..#.#....##...####.##....#.##########",
        "#.########..####...##.#...#..###....#...####..##.##.#..###.....#.#.#.#.#.##.##..#....#..##.###..#.##",
        ".....##.###...##...###.##.#####.##..####..####........#...###.####...#..####......#.....###...###.#.",
        "#.#.##.#.....#...###..##..#....##.########.#..#####.##.####..#####.##..###.#.##..##.###.#.#..##...##",
        "####.##.##.##.##..#.##.#.##..###....#.######..#.##.##.....#..#.#.##.##.#...#####.#.#.###..##.#.#.#.#",
        "#...##..#.#####.#..###...#..#.######.##..######...#.#.#...#...#.....#..#.##.###...###.######.##.#..#",
        ".........#...#.#.#.##..##......##.##.#.####.#....##..#.#.#.#..##..#.#....##...##.#####.#..#.#.#..###",
        "####..##.#.##.#..#..###..####.####.#.#..#.#....##.....##.#.#.#####..#...##.#.##.#.#...##.#.###...###",
        ".#..###.#.##.#####.....##.#..#..#.#####.#.#.#.####...#....#.......##..#.###.##..#.##.##..#..##.#####",
        ".##.......##.#.#.#.####....##..###.#..###..#.....#.##.#....##.#......#..##.##.##..##.###.####.#.....",
        "#######...#####...#...#.#.#####..##.###..#.#.#..###.#.....#####.#....##.#...####.###..#....##.#..###",
        "..#....#.#.#..#...#...###..#.######.##...###.##....##.#..#.#.#...####.#....####.#.###....######.#...",
        ".##...#....###..#.##..###...#.####.#.#####..#.....##.#....#.####.#..######.##..#.##.##...##..##.##..",
        "###.#..##.##.###.#.......#.#......###.#.##.###....##..####..#.#.#.##..###...##..##.##..#.#######...#",
        "...##.##..##.###...#..##.##.#..#..#.#..####.#.....###..####.#.##.###...##.##.####.#.#..#####.##.....",
        "..##.##.##..##......#..##.#.####.##.#.##.....##.##.####..#..###.###...#.#....#.#.###.##......###.##.",
        "##..##.#...#.#.##.....#.#..###..#.#..........#.#####......#...##..#..#..#.#....##...########.####...",
        "####...##.##.#.#.#.#.#..#######..#..#####..##..##.#.#.##...###...#..####.###.###.#....###.#...#.#.#.",
        "##..#.#.#####.###.###.###...##..#..#.#..##.#..#.#..##....#....###.####.#..#.#.##.##...###.###..###.#",
        "#.##..#...#....###...#.##.##..###..##............##....#.##...#.##.#.#..#####...#...#..#.#....##.#..",
        "####.#..#.##.......###.##.....#.#.##.#......##.#.#.###.#..####.#.......####..##..##.##.####....#.###",
        ".##.#.###.##.#####..##.#.#...#.####.##.##.#..#..#....#..####.#.###...#....##...#.##.#.###.....##...#",
        ".#...#.##.######.#.###.#....#.#..#.#.#.#.#...#.#.....#....##...#...##..###.#..#...#.#..####.#.#..#..",
        "..##...##....#..#...#.#.####.####....###...#.#...#####...#..##..##..#.#####...##..##..##......#.....",
        ".#.#.....####....#####.#.######.#..#####.#..#..####...#.#.###..#..##....#....##...#.######.#.#.....#",
        "###..###.#.##..#.####.#.##########.#.####..#...#.#.#...#.##...#.##..#..#..#...#.....#....#..####..##",
        ".#..#.#.##...##.###.##.#####....####...##.##.#..#.#.#..##.###.#...###.#.####.###########.#...#...##.",
        "##.#...#..###..#.#...#.##.##....#.#.##.#####..#....#.###..#.####.###..##..##..#...#.#..#.........###",
        ".......#...#.##.###..#.#.#...#........#.#.##.##.####..#.#..#..##..#....####.###........#...##.###...",
        "..#####...#.###...##.#.#.##...#...#####.##.###.#.#.####.#....##...#..####..#.#.####.....#.####...###",
        "#.###.#.......###..##.#..#.###.###.####.#....#..#..#.##.####..##..#.#..#...##.##.#..###....#####....",
        "......##..##.#.###.###.....#.##.#.#.##.######..#..######..#..#...#..#....#..#.##.####..#.#..#....#.#",
        ".#..####..####.#..##.###.####....#..#.....##.##.#..##..###..####.##.##.#...###...#.#.####..##.#....#",
        ".#....#.###.###.....##....#...#..#....##....#...#.######..##.........######.####..#.#..#..##....##.#",
        ".#####.##....###....###...#.##...#...#...##..##.#.#.###.##..###.#.#.#.###.#######..#....#.###..##...",
        "..##...#.###.#.#..#.#.......#..##.###.##..#..####..#...#...###....#.#...#...#.#...###.##...##.##.#..",
        "..#....#####..###.##.##.##...##..#.#.#.....##..##..##..###..#...###.###.#.#.####.##.###..#..####.##.",
        ".#.#...##.##..#...#.#....##.##.##.###..#.#.##.##......########....##.#.#.#....##....##.......#.#.#..",
        "#.#.##.#.####.#...##.#..##.....#####...##.#.##.#.##.##.####..##.#...#.#######.##..#....##..#........",
        "###.....#........##......##..###.##.#...###..#.#..#.###..#..##.##.#..#.#...#.#.##.#.###.####.##....#",
        "###.#..#..#..##.......##.###.###.......####....#..##..#...#..#####.....####.###..#.#..####...#.#...#",
        ".#...##.###.#######..#.#.####.#.....#.###.#....#.....#...######.#.#.#.#.....###..##..##..#####....##",
        "#.####.#..#...#.######.#.#.#....####.#######.#..###.#...####..#..#.....###.#....#.#.#.#..#.####..###",
        ".##..#..#..###..#..#.###....#....#.....##...#..#.#########..###########..#.#####..##.#.####......###",
        "##.###....##....##.#.##.##.##.......######.#.#.###.###.#####.#..##.##...####..##.######.####.#.....#"

};

static auto &algorithm = algorithm_real;
static auto &image = image_real;
//static auto& algorithm = algorithm_test;
//static auto& image = image_test;

std::vector<std::string> grow_image(const std::vector<std::string> &original_image) {
    size_t expanded_image_inc = 100;
    size_t expanded_image_dimension = original_image.size() + 2 * expanded_image_inc;
    std::vector<std::string> expanded_image(expanded_image_dimension);

    int j = 0;
    for (; j < expanded_image_inc; j++) {
        expanded_image.at(j) = std::string(expanded_image_dimension, '.');
    }
    for (int i = 0; i < original_image.size(); i++) {
        expanded_image.at(j) =
                std::string(expanded_image_inc, '.') + original_image.at(i) + std::string(expanded_image_inc, '.');
        j++;
    }
    for (int i = 0; i < expanded_image_inc; i++) {
        expanded_image.at(j) = std::string(expanded_image_dimension, '.');
        j++;
    }
    return expanded_image;
}

std::string get(const std::vector<std::string> &before, int x, int y) {
    // The background of the original image is dark. The real algorithm inverts all dark (.........) into #.
    // That means that we have to (safely) assume that the area outside our expanded view (expanded_image_before) has to have the same color as on the borders of the view.
    // Assumption works this the expanded view is large enough.
    auto real_x = std::clamp<int>(x, 0, before.size() - 1);
    auto real_y = std::clamp<int>(y, 0, before.size() - 1);
    return (before.at(real_y).at(real_x) == '#') ? "1" : "0";
}

void enhance_image(const std::vector<std::string> &before, std::vector<std::string> &after) {
    assert(before.size() == after.size());
    for (int j = 0; j < before.size(); j++) {
        for (int i = 0; i < before.size(); i++) {
            std::string nine_str =
                    get(before, i - 1, j - 1) +
                    get(before, i, j - 1) +
                    get(before, i + 1, j - 1) +
                    get(before, i - 1, j) +
                    get(before, i, j) +
                    get(before, i + 1, j) +
                    get(before, i - 1, j + 1) +
                    get(before, i, j + 1) +
                    get(before, i + 1, j + 1);
            auto nine = stol(nine_str, nullptr, 2);
            char lookup = algorithm.at(nine);
            after.at(j).at(i) = lookup;
        }
    }
}

int _20() {

    myprint(image.size());
    myprint(image[image.size() - 1].size());
    assert(image.size() == image[image.size() - 1].size());

    auto expanded_image_before = grow_image(image);
    auto expanded_image_after = expanded_image_before;

    for (int step = 0; step < 50; step++) {
        enhance_image(expanded_image_before, expanded_image_after);
        expanded_image_before = expanded_image_after;

        std::cout << "--" << std::endl;
        for (int i = 0; i < expanded_image_after.size(); i++) {
            std::cout << expanded_image_after[i] << std::endl;
        }
    }

    size_t count = 0;
    for (int i = 0; i < expanded_image_after.size(); i++) {
        count += std::count_if(expanded_image_after[i].begin(), expanded_image_after[i].end(),
                               [](auto value) { return value == '#'; });
    }
    myprint(count);

    return 0;
}
