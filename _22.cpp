#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#include <iostream>
#include <string_view>
#include <tuple>
#include <set>
#include <map>
#include <algorithm>
#include <sstream>
#include <list>
#include <thread>

#include <regex>

#define myprint(arg) std::cout << "" #arg << " = " << arg << std::endl;

using namespace std::string_view_literals;

constexpr char on = 1;
constexpr char off = 0;

static std::vector<std::tuple<char, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>>> input_real = {
        {on,  {-25,    22},     {-37,    17},     {-38,    8}},
        {on,  {-1,     45},     {-43,    11},     {-22,    28}},
        {on,  {-20,    26},     {-29,    24},     {-16,    29}},
        {on,  {-49,    4},      {-9,     40},     {-3,     47}},
        {on,  {-36,    10},     {-30,    18},     {-14,    30}},
        {on,  {-45,    2},      {-32,    16},     {-33,    18}},
        {on,  {-7,     39},     {-7,     47},     {-31,    17}},
        {on,  {-13,    35},     {-41,    13},     {-8,     39}},
        {on,  {-20,    27},     {-11,    42},     {-2,     48}},
        {on,  {-16,    32},     {-9,     42},     {-18,    30}},
        {off, {-11,    5},      {-35,    -25},    {15,     30}},
        {on,  {-27,    17},     {-9,     39},     {-45,    2}},
        {off, {-40,    -25},    {21,     35},     {-24,    -10}},
        {on,  {-12,    38},     {-30,    19},     {-38,    11}},
        {off, {8,      19},     {25,     37},     {6,      23}},
        {on,  {-17,    34},     {-10,    43},     {-45,    4}},
        {off, {-44,    -31},    {-22,    -5},     {-22,    -13}},
        {on,  {-8,     43},     {-6,     41},     {-25,    25}},
        {off, {-17,    0},      {28,     47},     {19,     34}},
        {on,  {-45,    0},      {-44,    6},      {-33,    15}},
        {on,  {-7874,  5506},   {-20379, -3039},  {59810,  88971}},
        {on,  {-21433, -6261},  {-46900, -34324}, {50271,  88746}},
        {on,  {38450,  68609},  {-7656,  11913},  {-72939, -50513}},
        {on,  {10810,  32231},  {62915,  80230},  {27306,  45793}},
        {on,  {16240,  33178},  {-69605, -65010}, {23182,  41140}},
        {on,  {74585,  88021},  {-33713, -11811}, {8878,   14352}},
        {on,  {8952,   26425},  {-5524,  18862},  {-92382, -59599}},
        {on,  {-5011,  17567},  {-62318, -50559}, {47882,  72780}},
        {on,  {74303,  97592},  {-15251, 3184},   {-10887, 11253}},
        {on,  {-71741, -56752}, {-14773, -2871},  {44590,  48159}},
        {on,  {7145,   26216},  {-73908, -47204}, {45148,  72408}},
        {on,  {3353,   11909},  {70884,  90962},  {-42418, -30798}},
        {on,  {-86705, -60907}, {-13957, 4192},   {-47576, -27852}},
        {on,  {45879,  55901},  {-64766, -35760}, {-50770, -23619}},
        {on,  {43802,  76492},  {43658,  54364},  {-29093, -11590}},
        {on,  {10370,  26860},  {45297,  57854},  {38221,  70721}},
        {on,  {-63998, -46603}, {-20267, -6000},  {-59847, -56863}},
        {on,  {-18630, 18378},  {40771,  60137},  {62275,  69541}},
        {on,  {55671,  80730},  {-27426, -12642}, {-60454, -41374}},
        {on,  {-34693, -14417}, {-79191, -69262}, {-26703, 3282}},
        {on,  {-38261, -30043}, {-31904, -3317},  {60552,  74101}},
        {on,  {-63295, -41017}, {-66142, -47664}, {17578,  31398}},
        {on,  {-13577, 1488},   {54526,  61735},  {-65440, -38952}},
        {on,  {48354,  70605},  {14703,  31697},  {-65071, -40580}},
        {on,  {62691,  92710},  {3173,   42903},  {-27555, -15004}},
        {on,  {-34060, -14740}, {-80185, -57343}, {17703,  26938}},
        {on,  {-88335, -73992}, {7675,   23682},  {-29991, -17731}},
        {on,  {-64720, -47504}, {45814,  72187},  {-26042, -1648}},
        {on,  {57030,  64993},  {35410,  49151},  {-13732, 9894}},
        {on,  {-77291, -65322}, {-25591, -24178}, {26942,  36225}},
        {on,  {-11274, 13032},  {-60620, -45108}, {-82331, -52549}},
        {on,  {-88590, -60753}, {-7850,  4911},   {23234,  57969}},
        {on,  {26408,  43629},  {49378,  89017},  {5396,   16841}},
        {on,  {69300,  87125},  {-47624, -20717}, {-6957,  27242}},
        {on,  {43326,  53338},  {41342,  68666},  {-29928, -8141}},
        {on,  {-69964, -57576}, {-44817, -7703},  {24558,  49911}},
        {on,  {-5529,  3405},   {-70486, -57793}, {38667,  71794}},
        {on,  {72365,  86627},  {-25567, -16003}, {-13583, -4327}},
        {on,  {9348,   39319},  {-73553, -55808}, {-30116, -18951}},
        {on,  {20947,  43924},  {68210,  91134},  {-10996, 26549}},
        {on,  {-80994, -60522}, {-17003, 2655},   {-6840,  18812}},
        {on,  {7928,   33299},  {54071,  62569},  {29146,  61880}},
        {on,  {-73188, -48824}, {33993,  63516},  {-25454, -8089}},
        {on,  {-82484, -65282}, {-9918,  10639},  {20102,  31437}},
        {on,  {53747,  68021},  {-49346, -36316}, {-21310, -15842}},
        {on,  {-5298,  6291},   {-56004, -49801}, {-59794, -43568}},
        {on,  {37703,  55636},  {-48346, -37782}, {27178,  43960}},
        {on,  {28973,  48768},  {30630,  54886},  {-48787, -38801}},
        {on,  {40085,  42058},  {58803,  86868},  {-7156,  -3537}},
        {on,  {-5244,  14514},  {-17017, 4800},   {71648,  82401}},
        {on,  {66637,  87713},  {-28138, -11871}, {22841,  29706}},
        {on,  {-73391, -56078}, {-42567, -24073}, {-34558, -8746}},
        {on,  {-46758, -10848}, {-37005, -29780}, {-83643, -48720}},
        {on,  {32265,  48746},  {44256,  70123},  {40711,  65344}},
        {on,  {7095,   34285},  {47014,  76227},  {-58356, -43652}},
        {on,  {30778,  34567},  {-75173, -60339}, {-50645, -26616}},
        {on,  {-95002, -66778}, {-6534,  21540},  {9811,   31414}},
        {on,  {-78525, -56832}, {-52209, -37537}, {-27987, -18272}},
        {on,  {34941,  61589},  {-66061, -52884}, {16427,  26746}},
        {on,  {26607,  44757},  {56550,  76152},  {9943,   15669}},
        {on,  {65247,  79688},  {-1198,  18004},  {-38529, -28860}},
        {on,  {-39043, -33901}, {-41363, -15844}, {57226,  73240}},
        {on,  {517,    18030},  {72575,  94894},  {-32607, -9450}},
        {on,  {-48138, -33957}, {-8725,  23156},  {-74829, -64476}},
        {on,  {14674,  40415},  {-10310, 8599},   {55548,  76889}},
        {on,  {5411,   28795},  {39926,  72819},  {43387,  60574}},
        {on,  {-11735, 1244},   {-81181, -73820}, {-28100, -4131}},
        {on,  {-94982, -74210}, {6396,   18510},  {-2618,  15316}},
        {on,  {-14012, -6314},  {-84572, -63156}, {31111,  52228}},
        {on,  {-118,   20059},  {34462,  58751},  {-80546, -56745}},
        {on,  {-42424, -16763}, {-61392, -46124}, {40506,  70305}},
        {on,  {-68200, -52902}, {-53715, -33370}, {500,    10204}},
        {on,  {-78742, -74311}, {-749,   26775},  {-17380, -1983}},
        {on,  {-45225, -18627}, {-10476, 6301},   {71396,  78161}},
        {on,  {-41962, -13258}, {5655,   31861},  {48787,  82853}},
        {on,  {-4287,  23298},  {-39395, -12857}, {-89437, -61466}},
        {on,  {70684,  81806},  {1617,   22727},  {-9322,  17632}},
        {on,  {60320,  64982},  {-11794, 2549},   {35758,  64707}},
        {on,  {-50895, -17858}, {-34644, -9840},  {-85306, -64871}},
        {on,  {12118,  28830},  {-73335, -43482}, {29166,  45459}},
        {on,  {11184,  43399},  {-84603, -53931}, {13762,  37604}},
        {on,  {42155,  53212},  {38257,  63651},  {-39259, -31414}},
        {on,  {-80486, -58420}, {-37408, -30208}, {-27620, -6908}},
        {on,  {-12226, 5972},   {-82320, -53208}, {30951,  48037}},
        {on,  {-72814, -45894}, {-51715, -34510}, {-29165, -7498}},
        {on,  {4315,   28593},  {-50405, -29388}, {-72958, -48216}},
        {on,  {7546,   29936},  {-32734, -29248}, {-88518, -50920}},
        {on,  {26049,  50278},  {-65601, -42011}, {-55923, -45671}},
        {on,  {-14665, 5917},   {63952,  90182},  {5320,   26209}},
        {on,  {-64305, -32115}, {-67815, -54683}, {15642,  41774}},
        {on,  {40402,  72364},  {-48615, -32584}, {11970,  43341}},
        {on,  {-36423, -21574}, {27425,  31751},  {-86149, -56524}},
        {on,  {38326,  62079},  {45689,  52640},  {38903,  56896}},
        {on,  {-18427, 3353},   {6007,   19691},  {-85062, -73139}},
        {on,  {-4191,  20389},  {-47833, -14927}, {65632,  75890}},
        {on,  {57372,  78099},  {-2471,  13074},  {50,     19993}},
        {on,  {-30736, -13109}, {-67034, -52066}, {27271,  58053}},
        {on,  {-71822, -41486}, {-69702, -55488}, {15902,  29808}},
        {on,  {-31535, -20720}, {75586,  92489},  {-26956, -1456}},
        {on,  {-80124, -61667}, {-47297, -19803}, {-2412,  28939}},
        {on,  {-24308, 1478},   {-79483, -76964}, {-34232, -15794}},
        {on,  {56194,  75420},  {21437,  47033},  {25529,  49225}},
        {on,  {4079,   40058},  {-24280, 5057},   {65772,  77187}},
        {on,  {-62180, -45533}, {-51608, -32908}, {30378,  45483}},
        {on,  {-13480, 28},     {-75291, -63119}, {16709,  51335}},
        {on,  {58818,  66910},  {-62369, -43633}, {8382,   17832}},
        {on,  {-43387, -27774}, {28522,  39561},  {45765,  73429}},
        {on,  {-64923, -30680}, {-62106, -53157}, {28636,  45166}},
        {on,  {54328,  67007},  {-74271, -36618}, {-12995, 3637}},
        {on,  {-77163, -45508}, {26641,  51588},  {7513,   28872}},
        {on,  {-87028, -61596}, {-23424, -6875},  {29267,  57373}},
        {on,  {-32999, -2171},  {-51771, -28704}, {-80305, -51440}},
        {on,  {-1213,  13360},  {62211,  71724},  {-52865, -26389}},
        {on,  {-59595, -40976}, {608,    38385},  {-67678, -39972}},
        {on,  {-51375, -40493}, {52834,  78732},  {-32478, -20512}},
        {on,  {-59461, -51678}, {-57205, -51776}, {-18552, 6908}},
        {on,  {-67103, -58469}, {2666,   27721},  {-59857, -31316}},
        {on,  {-31553, -20945}, {-56604, -41792}, {46058,  64858}},
        {on,  {-82863, -52103}, {1792,   32261},  {13005,  32987}},
        {on,  {-53436, -31839}, {31585,  55069},  {50592,  61674}},
        {on,  {41525,  49552},  {-25674, -19103}, {52676,  72349}},
        {on,  {65926,  70611},  {-37803, -18555}, {20771,  41361}},
        {on,  {64024,  83956},  {-37756, -22888}, {21054,  36415}},
        {on,  {41255,  70996},  {-60030, -36048}, {12729,  25474}},
        {on,  {40757,  43045},  {34970,  56717},  {-44253, -30030}},
        {on,  {-58784, -42274}, {-73761, -50142}, {11208,  29144}},
        {on,  {-34430, -8005},  {57336,  71214},  {18509,  46142}},
        {on,  {224,    27032},  {-40856, -23310}, {-73458, -63394}},
        {on,  {-94313, -58262}, {-36381, -23880}, {-12765, 10563}},
        {on,  {-3922,  21855},  {22784,  35285},  {56549,  82919}},
        {on,  {-25358, 1966},   {-82528, -76828}, {-13146, -10953}},
        {on,  {34104,  47312},  {44304,  79133},  {-48368, -24337}},
        {on,  {39991,  75751},  {-46352, -19595}, {44418,  52968}},
        {on,  {-39306, -16416}, {-26164, -186},   {61105,  74914}},
        {on,  {55569,  75595},  {24301,  43891},  {-47519, -35261}},
        {on,  {26093,  41420},  {57621,  71127},  {-51351, -25437}},
        {on,  {35996,  57167},  {-64743, -46879}, {-1650,  7206}},
        {on,  {-28855, -11320}, {76234,  80807},  {2935,   13504}},
        {on,  {-67054, -36441}, {-63873, -43786}, {-28254, 8947}},
        {on,  {-14509, 3328},   {-73695, -39712}, {-55836, -51258}},
        {on,  {68827,  93867},  {3505,   11168},  {18139,  41193}},
        {on,  {-62902, -53742}, {-62316, -29660}, {20939,  50463}},
        {on,  {-49675, -30208}, {45417,  70955},  {-37743, -14049}},
        {on,  {46586,  53764},  {-33379, -5171},  {-72062, -39028}},
        {on,  {-20911, -1427},  {49674,  65860},  {-63296, -37531}},
        {on,  {-54985, -36111}, {37281,  62377},  {30172,  45519}},
        {on,  {-4397,  18030},  {-84894, -61794}, {10830,  21585}},
        {on,  {11750,  38443},  {-82567, -66253}, {13438,  29233}},
        {on,  {59514,  67757},  {-51804, -35103}, {7019,   24467}},
        {on,  {27432,  50977},  {-42003, -30595}, {-63979, -42141}},
        {on,  {-15819, -5759},  {-61346, -42796}, {-54195, -34015}},
        {on,  {-76984, -52460}, {28797,  64073},  {-7149,  25332}},
        {on,  {-52158, -26040}, {11304,  26896},  {-80266, -51382}},
        {on,  {-9558,  1461},   {72523,  94866},  {-43893, -23592}},
        {on,  {-66298, -44000}, {25979,  47853},  {-53578, -42707}},
        {on,  {6988,   18659},  {51164,  69431},  {33837,  57752}},
        {on,  {-38858, -13161}, {-56417, -38120}, {-69115, -48732}},
        {on,  {40312,  77361},  {42382,  59137},  {20671,  36281}},
        {on,  {-37374, -16194}, {-6138,  22213},  {57535,  93920}},
        {on,  {4822,   17630},  {-78489, -55730}, {31282,  65954}},
        {on,  {-51269, -21808}, {51723,  72289},  {31278,  65239}},
        {on,  {67584,  92800},  {-7980,  -46},    {-37946, -5803}},
        {on,  {-11191, 7756},   {50336,  65372},  {60030,  68673}},
        {on,  {-35391, -26531}, {6204,   17520},  {61001,  78026}},
        {on,  {-28728, 1160},   {-84803, -59728}, {-54020, -32667}},
        {on,  {59337,  65724},  {33773,  45079},  {21264,  50548}},
        {on,  {-64482, -40710}, {47616,  59937},  {8139,   31218}},
        {on,  {-16863, 13681},  {-30676, -9757},  {-92073, -59935}},
        {on,  {-24997, -9374},  {17287,  40966},  {-84648, -60166}},
        {on,  {-25337, -3767},  {-74787, -62296}, {-35829, -10718}},
        {on,  {63697,  85710},  {953,    32652},  {20768,  32117}},
        {on,  {-44147, -19389}, {-60163, -35869}, {-83248, -50697}},
        {on,  {-57894, -53539}, {48553,  53550},  {26409,  38273}},
        {on,  {48679,  55245},  {15109,  50451},  {35152,  65388}},
        {on,  {25604,  62419},  {-20961, 7848},   {-79350, -64190}},
        {on,  {-22084, -10836}, {12754,  33323},  {-83535, -61512}},
        {on,  {21009,  43671},  {-32733, -5575},  {65432,  73204}},
        {on,  {-7178,  29385},  {-48608, -17272}, {-80620, -69880}},
        {on,  {25772,  50009},  {65383,  86566},  {-32131, -5636}},
        {on,  {634,    12760},  {52120,  69063},  {48427,  64000}},
        {on,  {-5534,  7408},   {57575,  74937},  {-38916, -22273}},
        {on,  {-32741, -17540}, {-40077, -31838}, {-76144, -56680}},
        {on,  {40310,  65131},  {-47993, -25612}, {40235,  71257}},
        {on,  {44408,  77248},  {13423,  34189},  {-53040, -34392}},
        {on,  {70803,  96452},  {9302,   24010},  {-11413, 9911}},
        {on,  {15449,  37539},  {48012,  67955},  {46095,  64173}},
        {on,  {7151,   40444},  {-25065, 6244},   {-91166, -75247}},
        {on,  {-90737, -75720}, {-5475,  16668},  {4153,   29576}},
        {on,  {-33261, -13080}, {55167,  75616},  {24910,  40299}},
        {on,  {-65599, -40401}, {-18178, -728},   {-78145, -51418}},
        {on,  {-58978, -34779}, {-59342, -42300}, {-191,   21488}},
        {on,  {18497,  38363},  {-21451, -14602}, {-92202, -55994}},
        {on,  {-73368, -42678}, {45965,  58851},  {-35584, -25807}},
        {on,  {68712,  81585},  {-27605, -8858},  {20493,  44638}},
        {on,  {-49956, -15982}, {-34609, -16081}, {52125,  71155}},
        {on,  {-72367, -47140}, {32980,  52447},  {22136,  36531}},
        {on,  {-41906, -21763}, {-60745, -33327}, {-74200, -40503}},
        {on,  {74281,  82455},  {-24387, -3961},  {-20290, 15753}},
        {on,  {-6850,  14006},  {29406,  50293},  {-79525, -70587}},
        {on,  {-19273, 13527},  {32325,  50356},  {-76866, -55145}},
        {on,  {-58958, -39262}, {-12206, 10909},  {59320,  69684}},
        {off, {52775,  62708},  {-22725, -18131}, {-64772, -51042}},
        {off, {-7316,  18889},  {-9236,  18079},  {75734,  84988}},
        {off, {-68904, -56803}, {7963,   21320},  {28299,  44607}},
        {off, {56738,  81745},  {-33655, -19734}, {27734,  54876}},
        {off, {-26307, -4399},  {-90257, -66498}, {-8368,  6190}},
        {on,  {-63424, -48935}, {51182,  61255},  {-35303, -9366}},
        {off, {-59497, -39391}, {-48595, -21538}, {-65637, -43222}},
        {off, {10314,  35649},  {5352,   24478},  {66042,  95448}},
        {on,  {66990,  86515},  {-26082, -17705}, {-18769, -11276}},
        {off, {37208,  65114},  {-31814, -16425}, {50870,  76166}},
        {off, {-6163,  11246},  {-77431, -59123}, {-61149, -39103}},
        {off, {-65580, -57918}, {-42189, -20880}, {-49370, -41832}},
        {off, {-68181, -47291}, {-43131, -24122}, {-52032, -39969}},
        {on,  {-28183, -20075}, {55733,  67672},  {-45712, -26158}},
        {off, {-20854, -3684},  {10595,  33536},  {62130,  75618}},
        {on,  {-1550,  8093},   {64709,  84232},  {-13210, 4539}},
        {on,  {-14584, 8934},   {-89926, -70898}, {10403,  26190}},
        {off, {-23968, -2269},  {55599,  70257},  {46101,  49355}},
        {on,  {63447,  78212},  {-1665,  5767},   {-49492, -33869}},
        {on,  {-76609, -63970}, {11730,  33874},  {-31397, -933}},
        {off, {-81830, -56014}, {-53112, -33489}, {1528,   28062}},
        {off, {-8280,  -4015},  {47133,  68418},  {-64354, -42733}},
        {off, {48414,  73285},  {-28088, -1338},  {48697,  64341}},
        {off, {38375,  56868},  {-75954, -47951}, {-13590, 9529}},
        {on,  {43124,  69757},  {45938,  57740},  {-28736, -4974}},
        {on,  {-9344,  -3482},  {55482,  85763},  {-39420, -38492}},
        {on,  {-43081, -29483}, {9548,   30431},  {61108,  88470}},
        {on,  {-37982, -17628}, {48715,  75366},  {36941,  48193}},
        {off, {-8331,  2546},   {-78987, -61305}, {-30626, -2011}},
        {off, {-81700, -62256}, {-10742, 6586},   {722,    26440}},
        {off, {-24912, -11729}, {-25032, -3413},  {-88232, -75563}},
        {on,  {58167,  74001},  {15467,  21830},  {-37657, -16140}},
        {on,  {9988,   37527},  {-48291, -30477}, {54921,  80713}},
        {on,  {62474,  73375},  {-17054, 1407},   {35366,  53946}},
        {off, {-83614, -64521}, {29149,  33522},  {-38377, -14053}},
        {off, {-53987, -32165}, {11117,  19957},  {-75785, -68730}},
        {on,  {42103,  70775},  {-73724, -54732}, {-5872,  7872}},
        {on,  {20494,  44429},  {11307,  21039},  {-76857, -61050}},
        {on,  {-20646, 11084},  {62264,  88883},  {26886,  41113}},
        {off, {-88900, -69393}, {1605,   20025},  {-36353, -23657}},
        {off, {-5057,  19004},  {63779,  92275},  {-19254, 13570}},
        {on,  {-57000, -34567}, {-71407, -61402}, {-25281, -23453}},
        {on,  {-3652,  25227},  {-26409, -7375},  {-78623, -67258}},
        {off, {53792,  79784},  {-46089, -39765}, {8293,   18162}},
        {off, {-76199, -59669}, {-45245, -28456}, {-13993, 15531}},
        {off, {12995,  45491},  {56914,  91086},  {-30682, -5699}},
        {off, {15637,  32089},  {-59007, -37524}, {-75718, -52527}},
        {off, {-73386, -49956}, {-39740, -16542}, {-69266, -46619}},
        {off, {-19602, 6141},   {-6868,  8551},   {67012,  92514}},
        {on,  {21642,  48389},  {-64658, -42774}, {34948,  63725}},
        {on,  {-20429, -2111},  {9416,   26675},  {71825,  81116}},
        {off, {-2501,  21349},  {49578,  64417},  {51184,  71703}},
        {off, {46241,  68960},  {-27030, 3257},   {-60862, -44951}},
        {on,  {-27054, -11006}, {59976,  79200},  {5931,   18842}},
        {on,  {-24276, -2701},  {-66183, -52326}, {-49472, -34192}},
        {off, {-68877, -53836}, {-28126, -15302}, {-46581, -34719}},
        {off, {-73359, -34792}, {13665,  36009},  {-56369, -46033}},
        {on,  {32103,  49141},  {-79415, -57451}, {-40343, -18996}},
        {on,  {73069,  82323},  {-9569,  9367},   {-14857, 7647}},
        {off, {-56161, -38162}, {29352,  48859},  {43169,  72145}},
        {on,  {-66774, -55959}, {-65235, -30961}, {13584,  33678}},
        {off, {27548,  45916},  {-26792, 283},    {-75012, -66571}},
        {on,  {-80711, -66751}, {-29628, -15357}, {-41564, -15914}},
        {off, {71552,  81414},  {-7863,  9193},   {-14213, 10187}},
        {on,  {36611,  56676},  {45719,  53058},  {-57614, -36899}},
        {off, {62768,  88220},  {-49020, -30531}, {138,    22494}},
        {on,  {15720,  31386},  {-31469, -20942}, {-79951, -69439}},
        {off, {20888,  41231},  {-64104, -39191}, {-58681, -44918}},
        {on,  {64912,  75468},  {22232,  45193},  {-29893, 2078}},
        {on,  {361,    31325},  {63314,  77907},  {-54330, -28730}},
        {on,  {-19404, 15732},  {73142,  90411},  {25581,  35682}},
        {on,  {61748,  71694},  {19771,  38115},  {13843,  22810}},
        {on,  {-6187,  8381},   {-42494, -25695}, {-86533, -60639}},
        {on,  {63798,  82990},  {-40381, -13733}, {4229,   28270}},
        {on,  {-81663, -57842}, {-666,   22557},  {-68350, -41120}},
        {off, {-47003, -20315}, {-62845, -55753}, {-52267, -35229}},
        {on,  {-94464, -67322}, {-40490, -19348}, {-5254,  10478}},
        {off, {43705,  67726},  {-24299, -700},   {-75234, -57148}},
        {off, {-41646, -12552}, {-68007, -46831}, {-43270, -39325}},
        {on,  {8135,   18536},  {43749,  52328},  {52189,  74451}},
        {off, {12530,  45202},  {42121,  58623},  {-64757, -34726}},
        {on,  {-38525, -6498},  {-85547, -69786}, {-3153,  19751}},
        {off, {28152,  47986},  {57588,  66161},  {25607,  39999}},
        {on,  {-81199, -63920}, {-10524, 3660},   {-1797,  9134}},
        {on,  {-25334, -13304}, {58421,  89837},  {-32681, -21215}},
        {on,  {-73427, -47035}, {26359,  48721},  {-8616,  13879}},
        {on,  {-35010, -13996}, {11972,  23992},  {-91842, -56559}},
        {off, {61555,  72930},  {15378,  28117},  {-45130, -33545}},
        {on,  {-76375, -71158}, {25706,  30056},  {-5494,  385}},
        {off, {-32602, -6222},  {-79216, -72287}, {-9505,  12380}},
        {off, {-88346, -67085}, {-14944, 7502},   {-27154, -10379}},
        {off, {-31807, -5298},  {65364,  79818},  {29230,  47308}},
        {on,  {-57443, -23960}, {59901,  70861},  {12729,  28027}},
        {off, {13199,  37843},  {67820,  79799},  {-5787,  6066}},
        {on,  {-54982, -33556}, {56857,  84194},  {-5511,  17250}},
        {on,  {22920,  41679},  {4390,   24163},  {58350,  76766}},
        {on,  {-59743, -28439}, {-84006, -54986}, {-7949,  14308}},
        {on,  {61639,  80928},  {16361,  30223},  {2020,   26391}},
        {off, {-10984, 10732},  {-89468, -59751}, {9884,   41102}},
        {off, {-79212, -64694}, {14128,  32527},  {28460,  47157}},
        {off, {64235,  86210},  {-42383, -17290}, {-28514, -12861}},
        {off, {-1388,  7043},   {61942,  90427},  {-20381, -12457}},
        {off, {63544,  80468},  {-37417, -9915},  {36144,  49273}},
        {off, {-35734, -19033}, {53057,  72367},  {-60953, -41489}},
        {on,  {35159,  48100},  {-76380, -55607}, {-2127,  3715}},
        {on,  {-75962, -58571}, {-54185, -42931}, {-7049,  26522}},
        {off, {40155,  77172},  {-42052, -32487}, {37159,  57286}},
        {off, {28393,  39783},  {-358,   22551},  {-75711, -64727}},
        {off, {-49182, -19539}, {-19313, 11789},  {51776,  88876}},
        {off, {6323,   22117},  {-66212, -50296}, {34106,  55484}},
        {off, {26923,  57572},  {-84808, -57461}, {8216,   22262}},
        {off, {-55268, -27345}, {-34331, -26689}, {-66095, -50926}},
        {off, {-16773, 7149},   {40517,  69874},  {57767,  64060}},
        {on,  {-7644,  5711},   {57323,  80843},  {-46902, -23267}},
        {on,  {12990,  46040},  {-85031, -65525}, {-14638, 2525}},
        {on,  {36838,  61816},  {43624,  45798},  {-56805, -30128}},
        {off, {-16625, -13438}, {15198,  26225},  {56760,  89970}},
        {off, {-47586, -8125},  {38595,  61503},  {-79954, -54733}},
        {on,  {68425,  94332},  {-23770, -10888}, {-15853, -1516}},
        {off, {45879,  72720},  {10249,  22803},  {31170,  65673}},
        {off, {-66838, -47717}, {22029,  54053},  {17894,  34996}},
        {on,  {-27131, -15091}, {-72018, -41671}, {-69529, -45135}},
        {off, {49858,  81214},  {-40371, -32977}, {12446,  29253}},
        {on,  {-49045, -40498}, {35803,  50496},  {-54698, -45453}},
        {on,  {37056,  66261},  {-37677, -19546}, {49803,  65703}},
        {off, {-28190, -3348},  {-73123, -58301}, {30508,  41418}},
        {off, {-78271, -57241}, {-18397, 11460},  {-41270, -21406}},
        {off, {48500,  57434},  {-15736, 22263},  {55834,  67267}},
        {on,  {-94862, -73351}, {-7423,  9149},   {-27569, 1987}},
        {on,  {43486,  56652},  {39047,  56815},  {17045,  40948}},
        {off, {-2337,  16612},  {42633,  69610},  {45684,  73188}},
        {on,  {21127,  49270},  {-30808, -25029}, {-81791, -62703}},
        {on,  {-30891, -21855}, {-28949, 184},    {69030,  89093}},
        {on,  {44543,  50914},  {20954,  34529},  {-70573, -46226}},
        {on,  {5780,   19766},  {50550,  70469},  {-48331, -34703}},
        {off, {56501,  93443},  {-4621,  18563},  {11287,  38665}},
        {on,  {42327,  58505},  {-70210, -42337}, {-35047, -1223}},
        {off, {18423,  36939},  {-8454,  6658},   {-91865, -58242}},
        {off, {58609,  79717},  {34512,  43834},  {19543,  51200}},
        {on,  {30744,  40798},  {43451,  74091},  {21225,  50983}},
        {off, {-16052, -514},   {-28879, 585},    {67792,  93741}},
        {off, {-5109,  4752},   {56092,  80738},  {-56908, -27027}},
        {on,  {-91998, -65044}, {-497,   38054},  {-22159, -5072}},
        {off, {67089,  80512},  {11116,  39389},  {24842,  41259}},
        {off, {17874,  33524},  {47720,  80311},  {-53378, -23314}},
        {on,  {11894,  29924},  {-80907, -60120}, {22583,  34522}},
        {off, {26908,  30896},  {-78232, -56487}, {3888,   26400}},
        {on,  {43517,  74781},  {32409,  38655},  {38475,  57762}},
        {on,  {-33512, -10912}, {39239,  68119},  {50194,  76546}},
        {on,  {-31556, -23733}, {55040,  76570},  {34651,  56813}},
        {on,  {59734,  87601},  {-46068, -27321}, {13508,  43534}},
        {off, {-28179, -2124},  {25183,  50241},  {58671,  87869}},
        {on,  {-69791, -45293}, {-74163, -44289}, {-17713, 4452}},
        {on,  {-17404, 695},    {45309,  60367},  {-58557, -48788}},
        {on,  {-21736, -18077}, {68659,  70975},  {21432,  48567}},
        {on,  {23875,  54273},  {-75359, -45864}, {-54931, -27989}},
        {on,  {-35409, -24375}, {-82394, -43946}, {31058,  42523}},
        {on,  {-8343,  13717},  {31327,  58902},  {55577,  83325}},
        {off, {-48926, -32870}, {42263,  59054},  {41809,  53373}},
        {off, {48808,  87204},  {-57303, -27371}, {-32342, -7317}},
        {on,  {-67008, -39098}, {-51403, -26899}, {-54475, -39811}},
        {on,  {6581,   35901},  {-85829, -56275}, {-41133, -19639}},
        {off, {-88954, -64372}, {20411,  33836},  {3213,   34345}},
        {on,  {-7765,  15787},  {59696,  72865},  {46260,  65892}},
        {on,  {-41030, -16419}, {72963,  77043},  {793,    25599}},
        {on,  {-34743, -14557}, {-71490, -52461}, {16977,  35464}},
        {on,  {52820,  76139},  {-16895, 8754},   {-67504, -46523}},
        {on,  {26561,  43699},  {35122,  47583},  {-69853, -60751}},
        {off, {53935,  80807},  {-50668, -40940}, {-9088,  11134}},
        {on,  {-9256,  18245},  {-82833, -74237}, {-8555,  9806}},
        {off, {-54561, -36968}, {-16270, 15979},  {49514,  84021}},
        {off, {-71537, -60947}, {-34759, -10335}, {16287,  34069}},
        {on,  {62156,  92714},  {71,     22995},  {-2786,  24138}},
        {off, {-93224, -70481}, {-17263, -11214}, {-8572,  14568}},
        {off, {27687,  38549},  {66418,  78828},  {-26765, -1993}},
        {off, {6373,   44479},  {-20716, 411},    {56296,  85091}},
        {off, {-10240, 9238},   {76954,  86558},  {-20574, -9567}},
        {on,  {59824,  81660},  {42481,  53777},  {12226,  39439}},
        {on,  {10464,  38714},  {-66090, -35600}, {-63269, -48994}},
        {off, {10086,  26680},  {-67885, -33884}, {-73115, -35932}},
        {on,  {46274,  62715},  {-21783, 14328},  {-66177, -46199}},
        {on,  {-45939, -26665}, {606,    21920},  {47479,  84070}},
        {off, {67911,  87660},  {-19150, 18476},  {-7232,  16762}},
        {off, {-62714, -52605}, {-63367, -33979}, {-48407, -23827}},
        {on,  {55656,  77456},  {-1928,  20756},  {-59425, -29123}},
        {on,  {22311,  52656},  {56599,  78053},  {-8060,  16138}},
        {on,  {-90012, -72349}, {-25411, -2567},  {-18968, 1095}},
        {off, {-75165, -59317}, {-35674, -8599},  {-42017, -25631}},
        {on,  {74039,  92478},  {-4796,  7717},   {-23856, -14498}},
        {on,  {37389,  46931},  {50038,  78098},  {-9817,  5995}},
        {off, {29297,  54007},  {54429,  66539},  {3163,   26930}},
        {on,  {16320,  36328},  {54585,  75579},  {-30097, -3297}},
        {on,  {6120,   22699},  {63678,  70653},  {38784,  45811}},
        {on,  {23070,  32721},  {-41792, -30954}, {-66040, -45827}},
        {off, {20355,  29767},  {66334,  89377},  {-28998, 4344}},
        {off, {5478,   21486},  {-25991, 5188},   {62514,  90823}},
        {off, {59573,  72444},  {39402,  64676},  {-17460, -4643}},
        {on,  {13708,  27225},  {-57113, -21835}, {57734,  67702}},
        {on,  {-67885, -35556}, {28851,  63688},  {-56125, -21746}}
};

static std::vector<std::tuple<int64_t, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>>> input_test = {
        {on,  {-20, 26},  {-36, 17},  {-47, 7}}, //0
        {on,  {-20, 33},  {-21, 23},  {-26, 28}},
        {on,  {-22, 28},  {-29, 23},  {-38, 16}},
        {on,  {-46, 7},   {-6,  46},  {-50, -1}},
        {on,  {-49, 1},   {-3,  46},  {-24, 28}},
        {on,  {2,   47},  {-22, 22},  {-23, 27}},//5
        {on,  {-27, 23},  {-28, 26},  {-21, 29}},
        {on,  {-39, 5},   {-6,  47},  {-3,  44}},
        {on,  {-30, 21},  {-8,  43},  {-13, 34}},
        {on,  {-22, 26},  {-27, 20},  {-29, 19}},
        {off, {-48, -32}, {26,  41},  {-47, -37}},//10
        {on,  {-12, 35},  {6,   50},  {-50, -2}},
        {off, {-48, -32}, {-32, -16}, {-15, -5}},
        {on,  {-18, 26},  {-33, 15},  {-7,  46}},
        {off, {-40, -22}, {-38, -28}, {23,  41}},
        {on,  {-16, 35},  {-41, 10},  {-47, 6}},//15
        {off, {-32, -23}, {11,  30},  {-14, 3}},
        {on,  {-49, -5},  {-3,  45},  {-29, 18}},
        {off, {18,  30},  {-20, -8},  {-3,  13}},
        {on,  {-41, 9},   {-7,  43},  {-33, 15}},//19
//{on,{-54112,-39298},{-85059,-49293},{-27449,7877}},
//{on,{967,23432},{45373,81175},{27513,53682}}
};

static std::vector<std::tuple<int64_t, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>, std::tuple<int64_t, int64_t>>> input_test2 = {
        {{on},  {-5,      47},     {-31,     22},     {-19,     33}},
        {{on},  {-44,     5},      {-27,     21},     {-14,     35}},
        {{on},  {-49,     -1},     {-11,     42},     {-10,     38}},
        {{on},  {-20,     34},     {-40,     6},      {-44,     1}},
        {{off}, {26,      39},     {40,      50},     {-2,      11}},
        {{on},  {-41,     5},      {-41,     6},      {-36,     8}},
        {{off}, {-43,     -33},    {-45,     -28},    {7,       25}},
        {{on},  {-33,     15},     {-32,     19},     {-34,     11}},
        {{off}, {35,      47},     {-46,     -34},    {-11,     5}},
        {{on},  {-14,     36},     {-6,      44},     {-16,     29}},
        {{on},  {-57795,  -6158},  {29564,   72030},  {20435,   90618}},
        {{on},  {36731,   105352}, {-21140,  28532},  {16094,   90401}},
        {{on},  {30999,   107136}, {-53464,  15513},  {8553,    71215}},
        {{on},  {13528,   83982},  {-99403,  -27377}, {-24141,  23996}},
        {{on},  {-72682,  -12347}, {18159,   111354}, {7391,    80950}},
        {{on},  {-1060,   80757},  {-65301,  -20884}, {-103788, -16709}},
        {{on},  {-83015,  -9461},  {-72160,  -8347},  {-81239,  -26856}},
        {{on},  {-52752,  22273},  {-49450,  9096},   {54442,   119054}},
        {{on},  {-29982,  40483},  {-108474, -28371}, {-24328,  38471}},
        {{on},  {-4958,   62750},  {40422,   118853}, {-7672,   65583}},
        {{on},  {55694,   108686}, {-43367,  46958},  {-26781,  48729}},
        {{on},  {-98497,  -18186}, {-63569,  3412},   {1232,    88485}},
        {{on},  {-726,    56291},  {-62629,  13224},  {18033,   85226}},
        {{on},  {-110886, -34664}, {-81338,  -8658},  {8914,    63723}},
        {{on},  {-55829,  24974},  {-16897,  54165},  {-121762, -28058}},
        {{on},  {-65152,  -11147}, {22489,   91432},  {-58782,  1780}},
        {{on},  {-120100, -32970}, {-46592,  27473},  {-11695,  61039}},
        {{on},  {-18631,  37533},  {-124565, -50804}, {-35667,  28308}},
        {{on},  {-57817,  18248},  {49321,   117703}, {5745,    55881}},
        {{on},  {14781,   98692},  {-1341,   70827},  {15753,   70151}},
        {{on},  {-34419,  55919},  {-19626,  40991},  {39015,   114138}},
        {{on},  {-60785,  11593},  {-56135,  2999},   {-95368,  -26915}},
        {{on},  {-32178,  58085},  {17647,   101866}, {-91405,  -8878}},
        {{on},  {-53655,  12091},  {50097,   105568}, {-75335,  -4862}},
        {{on},  {-111166, -40997}, {-71714,  2688},   {5609,    50954}},
        {{on},  {-16602,  70118},  {-98693,  -44401}, {5197,    76897}},
        {{on},  {16383,   101554}, {4615,    83635},  {-44907,  18747}},
        {{off}, {-95822,  -15171}, {-19987,  48940},  {10804,   104439}},
        {{on},  {-89813,  -14614}, {16069,   88491},  {-3297,   45228}},
        {{on},  {41075,   99376},  {-20427,  49978},  {-52012,  13762}},
        {{on},  {-21330,  50085},  {-17944,  62733},  {-112280, -30197}},
        {{on},  {-16478,  35915},  {36008,   118594}, {-7885,   47086}},
        {{off}, {-98156,  -27851}, {-49952,  43171},  {-99005,  -8456}},
        {{off}, {2032,    69770},  {-71013,  4824},   {7471,    94418}},
        {{on},  {43670,   120875}, {-42068,  12382},  {-24787,  38892}},
        {{off}, {37514,   111226}, {-45862,  25743},  {-16714,  54663}},
        {{off}, {25699,   97951},  {-30668,  59918},  {-15349,  69697}},
        {{off}, {-44271,  17935},  {-9516,   60759},  {49131,   112598}},
        {{on},  {-61695,  -5813},  {40978,   94975},  {8655,    80240}},
        {{off}, {-101086, -9439},  {-7088,   67543},  {33935,   83858}},
        {{off}, {18020,   114017}, {-48931,  32606},  {21474,   89843}},
        {{off}, {-77139,  10506},  {-89994,  -18797}, {-80,     59318}},
        {{off}, {8476,    79288},  {-75520,  11602},  {-96624,  -24783}},
        {{on},  {-47488,  -1262},  {24338,   100707}, {16292,   72967}},
        {{off}, {-84341,  13987},  {2429,    92914},  {-90671,  -1318}},
        {{off}, {-37810,  49457},  {-71013,  -7894},  {-105357, -13188}},
        {{off}, {-27365,  46395},  {31009,   98017},  {15428,   76570}},
        {{off}, {-70369,  -16548}, {22648,   78696},  {-1892,   86821}},
        {{on},  {-53470,  21291},  {-120233, -33476}, {-44150,  38147}},
        {{off}, {-93533,  -4276},  {-16170,  68771},  {-104985, -24507}}
};

static auto &input = input_real;
//static auto& input = input_test;

char cube[102][102][102];

int _22_1() {
    memset(cube, 0, sizeof(cube));
    myprint(sizeof(cube))

    for (auto[make_on, x_range, y_range, z_range]: input) {
        auto[from_x, to_x] = x_range;
        auto[from_y, to_y] = y_range;
        auto[from_z, to_z] = z_range;

        if (from_x < -50 || to_x > 50) {
            continue;
        }
        if (from_y < -50 || to_y > 50) {
            continue;
        }
        if (from_z < -50 || to_z > 50) {
            continue;
        }

        for (int x = from_x; x <= to_x; x++) {
            for (int y = from_y; y <= to_y; y++) {
                for (int z = from_z; z <= to_z; z++) {
                    cube[z + 50][y + 50][x + 50] = make_on;
                }
            }
        }

    }

    int64_t counter = 0;
    for (int x = 0; x < 102; x++) {
        for (int y = 0; y < 102; y++) {
            for (int z = 0; z < 102; z++) {
                counter += cube[z][y][x];
            }
        }
    }

    myprint(counter);

    return 0;
}

void sort_unique_erase(std::vector<int64_t> &v) {
    std::sort(v.begin(), v.end());
    v.erase(std::unique(v.begin(), v.end()), v.end());
}

int _22_2() {
    std::vector<int64_t> xx;
    std::vector<int64_t> yy;
    std::vector<int64_t> zz;

    auto add_to_grid = [&](auto &v, int64_t value) {
        v.push_back(value);
    };

    for (auto &cmd: input) {
        auto&[is_on, range_x, range_y, range_z] = cmd;

        add_to_grid(xx, std::get<0>(range_x));
        add_to_grid(xx, std::get<1>(range_x));
        add_to_grid(xx, std::get<1>(range_x) + 1); // in order to include the `to` value of range_x

        add_to_grid(yy, std::get<0>(range_y));
        add_to_grid(yy, std::get<1>(range_y));
        add_to_grid(yy, std::get<1>(range_y) + 1); // in order to include the `to` value of range_y

        add_to_grid(zz, std::get<0>(range_z));
        add_to_grid(zz, std::get<1>(range_z));
        add_to_grid(zz, std::get<1>(range_z) + 1); // in order to include the `to` value of range_z
    }
    sort_unique_erase(xx);
    sort_unique_erase(yy);
    sort_unique_erase(zz);

    myprint(xx.size())
    myprint(yy.size())
    myprint(zz.size())

    auto get_index = [&](auto &v, int64_t grid_value) {
        auto it = std::lower_bound(v.begin(), v.end(), grid_value);
        assert(it != v.end());
        assert(*it == grid_value);
        return std::distance(v.begin(), it);
    };

    auto offset = [&](int64_t x, int64_t y, int64_t z) {
        auto xSize = xx.size() - 1;
        auto ySize = yy.size() - 1;
        return (z * xSize * ySize) + (y * xSize) + x;
    };

    std::vector<bool> grid((xx.size() - 1) * (yy.size() - 1) * (zz.size() - 1));
    myprint(grid.size())

    for (auto &cmd: input) {
        auto&[is_on, range_x, range_y, range_z] = cmd;
        auto index_x_from = get_index(xx, std::get<0>(range_x));
        auto index_x_to = get_index(xx, std::get<1>(range_x));
        assert(index_x_from < index_x_to);

        auto index_y_from = get_index(yy, std::get<0>(range_y));
        auto index_y_to = get_index(yy, std::get<1>(range_y));
        assert(index_y_from < index_y_to);

        auto index_z_from = get_index(zz, std::get<0>(range_z));
        auto index_z_to = get_index(zz, std::get<1>(range_z));
        assert(index_z_from < index_z_to);


        for (auto z = index_z_from; z <= index_z_to; z++) {
            for (auto y = index_y_from; y <= index_y_to; y++) {
                for (auto x = index_x_from; x <= index_x_to; x++) {
                    grid.at(offset(x, y, z)) = is_on;
                }
            }
        }
    }

    int64_t total_on = 0;

    for (auto z = 0; z < zz.size() - 1; z++) {
        for (auto y = 0; y < yy.size() - 1; y++) {
            for (auto x = 0; x < xx.size() - 1; x++) {
                auto is_on = grid.at(offset(x, y, z));
                if (is_on) {
                    auto x_grid_size = xx[x + 1] - xx[x];
                    auto y_grid_size = yy[y + 1] - yy[y];
                    auto z_grid_size = zz[z + 1] - zz[z];
                    total_on += (x_grid_size * y_grid_size * z_grid_size);
                }
            }
        }
    }

    myprint(total_on);

    return 0;
}